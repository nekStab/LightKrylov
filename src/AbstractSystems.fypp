#:include "../include/common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
module LightKrylov_AbstractSystems
    use LightKrylov_Constants
    use LightKrylov_AbstractVectors
    use LightKrylov_AbstractLinops
    implicit none
    private

    character*128, parameter :: this_module = 'LightKrylov_AbstractSystems'

    ! Base type for dynamical systems.
    type, abstract, public :: abstract_dynamical_system
    end type abstract_dynamical_system

    #:for kind, type in RC_KINDS_TYPES
    !----------------------------------------------------------------------------------------
    !-----     ABSTRACT GENERAL ${type}$ DYNAMICAL SYSTEM DEFINITION WITH kind=${kind}$     -----
    !----------------------------------------------------------------------------------------

    ! Abstract Jacobian linop for kind=${kind}$
    type, abstract, extends(abstract_linop_${type[0]}$${kind}$), public :: abstract_jacobian_linop_${type[0]}$${kind}$
        !! Abstract type for the local linearization of the dynamical system around the state X
        class(abstract_vector_${type[0]}$${kind}$), allocatable :: X
        !! System state around which the equatons are linearized.
    contains
        private
        procedure(abstract_matvec_${type[0]}$${kind}$), pass(self), deferred, public :: matvec
        procedure(abstract_matvec_${type[0]}$${kind}$), pass(self), deferred, public :: rmatvec
    end type

    abstract interface
        subroutine abstract_matvec_${type[0]}$${kind}$(self, vec_in, vec_out)
            !! Interface for the matrix-vector product for the Jacobian.
            use lightkrylov_AbstractVectors
            import abstract_jacobian_linop_${type[0]}$${kind}$
            class(abstract_jacobian_linop_${type[0]}$${kind}$), intent(in)  :: self
            !! Linear operator \(\mathbf{A}\).
            class(abstract_vector_${type[0]}$${kind}$), intent(in)  :: vec_in
            !! Vector to be multiplied by \(\mathbf{A}\).
            class(abstract_vector_${type[0]}$${kind}$), intent(out) :: vec_out
            !! Result of the matrix-vector product.
        end subroutine abstract_matvec_${type[0]}$${kind}$
    end interface

    ! Abstract continuous system for kind=${kind}$.
    type, abstract, extends(abstract_dynamical_system), public :: abstract_system_${type[0]}$${kind}$
        !! Continuous-time dynamical system for Newton fixed-point iteration via the Jacobian
        class(abstract_jacobian_linop_${type[0]}$${kind}$), allocatable :: jacobian
        !! System Jacobian \( \left. \frac{\partial \mathbf{F}}{\partial \mathbf{X}} \right|_{X^*} \).
    contains
        private
        procedure(abstract_eval_${type[0]}$${kind}$), pass(self), deferred, public :: eval
        !! Procedure to evaluate the system response \( \mathbf{Y} = \mathbf{F}(\mathbf{X}) \).
    end type

    abstract interface
        subroutine abstract_eval_${type[0]}$${kind}$(self, vec_in, vec_out, atol)
            !! Interface for the evaluation of the system response.
            use LightKrylov_AbstractVectors
            import abstract_system_${type[0]}$${kind}$, ${kind}$
            class(abstract_system_${type[0]}$${kind}$), intent(in)  :: self
            !! System
            class(abstract_vector_${type[0]}$${kind}$), intent(in)  :: vec_in
            !! State
            class(abstract_vector_${type[0]}$${kind}$), intent(out) :: vec_out
            !! Response
            real(${kind}$),                                   intent(in)  :: atol
            !! Solver tolerance
        end subroutine abstract_eval_${type[0]}$${kind}$
    end interface

    #:endfor
end module LightKrylov_AbstractSystems