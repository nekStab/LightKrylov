#:include "../include/common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
module LightKrylov_AbstractSystems
    !!  This module provides the abstract types necessary to define an algebraic system of
    !!  nonlinear equations to be solved using the Newton method.
    use stdlib_optval, only: optval
    use LightKrylov_Logger
    use LightKrylov_Constants
    use LightKrylov_AbstractVectors
    use LightKrylov_AbstractLinops
    implicit none
    private

    character(len=*), parameter :: this_module      = 'LK_Systems'
    character(len=*), parameter :: this_module_long = 'LK_AbstractSystems'

    ! Base type for abstract systems.
    type, abstract, public :: abstract_system
    private
        integer :: eval_counter = 0
    contains
        procedure, pass(self), public :: get_eval_counter
        !! Return eval counter value
        procedure, pass(self), public :: reset_eval_counter
        !! Reset eval counter
    end type abstract_system

    #:for kind, type in RC_KINDS_TYPES
    !----------------------------------------------------------------------------
    !-----     ABSTRACT GENERAL ${type}$ SYSTEM DEFINITION WITH kind=${kind}$     -----
    !----------------------------------------------------------------------------

    ! Abstract Jacobian linop for kind=${kind}$
    type, abstract, extends(abstract_linop_${type[0]}$${kind}$), public :: abstract_jacobian_linop_${type[0]}$${kind}$
        !! Abstract type for the local linearization of the system around the state X
        class(abstract_vector_${type[0]}$${kind}$), allocatable :: X
        !! System state around which the equatons are linearized.
    contains
    end type

    ! Abstract system for kind=${kind}$.
    type, abstract, extends(abstract_system), public :: abstract_system_${type[0]}$${kind}$
        !! System for Newton fixed-point iteration via the Jacobian
        class(abstract_jacobian_linop_${type[0]}$${kind}$), allocatable :: jacobian
        !! System Jacobian \( \left. \frac{\partial \mathbf{F}}{\partial \mathbf{X}} \right|_{X^*} \).
    contains
        private
        procedure(abstract_eval_${type[0]}$${kind}$), pass(self), deferred, public :: response
        !! Procedure to evaluate the system response \( \mathbf{Y} = \mathbf{F}(\mathbf{X}) \).
        ! Wrapper including counter increment
        procedure, pass(self), public :: eval => eval_${type[0]}$${kind}$
        !! Wrapper for response including the counter increment
    end type

    abstract interface
        subroutine abstract_eval_${type[0]}$${kind}$(self, vec_in, vec_out, atol)
            !! Interface for the evaluation of the system response.
            use LightKrylov_AbstractVectors
            import abstract_system_${type[0]}$${kind}$, ${kind}$
            class(abstract_system_${type[0]}$${kind}$), intent(inout)  :: self
            !! System
            class(abstract_vector_${type[0]}$${kind}$), intent(in)  :: vec_in
            !! State
            class(abstract_vector_${type[0]}$${kind}$), intent(out) :: vec_out
            !! Response
            real(${kind}$),                   intent(in)  :: atol
            !! Solver tolerance
        end subroutine abstract_eval_${type[0]}$${kind}$
    end interface

    #:endfor
contains

    !---------------------------------------------------------------
    !-----     Getter/Setter routines for abstract_systems     -----
    !---------------------------------------------------------------
 
    pure integer function get_eval_counter(self) result(count)
      !! Getter function for the number of eval calls
      class(abstract_system), intent(in) :: self
      count = self%eval_counter
    end function get_eval_counter

    subroutine reset_eval_counter(self, procedure, counter)
      class(abstract_system), intent(inout) :: self
      character(len=*), intent(in) :: procedure
      !! name of the caller routine
      integer, optional, intent(in) :: counter
      !! optional flag to reset to an integer other than zero.
      ! internals
      integer :: counter_, count_old
      character(len=128) :: msg
      counter_ = optval(counter, 0)
      count_old = self%get_eval_counter()
      if (count_old /= 0 .or. counter_ /= 0) then
        write(msg,'(A,I0,A,I0,A)') 'Total number of evals: ', count_old, '. Resetting counter to ', counter_, '.'
        call logger%log_message(msg, module=this_module, procedure='reset_eval_counter('//trim(procedure)//')')
        self%eval_counter = counter_
      end if
      return
    end subroutine reset_eval_counter

    !---------------------------------------------------------------------
    !-----     Wrapper for system response to increment counters     -----
    !---------------------------------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    subroutine eval_${type[0]}$${kind}$(self, vec_in, vec_out, atol)
        class(abstract_system_${type[0]}$${kind}$), intent(inout) :: self
        class(abstract_vector_${type[0]}$${kind}$), intent(in)    :: vec_in
        class(abstract_vector_${type[0]}$${kind}$), intent(out)   :: vec_out
        real(${kind}$),                             intent(in)    :: atol
        ! internal
        character(len=128) :: msg
        self%eval_counter = self%eval_counter + 1
        write(msg,'(I3,1X,A)') self%eval_counter, 'start'
        call logger%log_debug(msg, module=this_module, procedure='response')
        call self%response(vec_in, vec_out, atol)
        write(msg,'(I3,1X,A)') self%eval_counter, 'end'
        call logger%log_debug(msg, module=this_module, procedure='response')
        return
    end subroutine eval_${type[0]}$${kind}$
    #:endfor

end module LightKrylov_AbstractSystems
