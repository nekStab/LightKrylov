#:include "../../include/common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
module LightKrylov_TestUtils
    ! Fortran Standard Library
    use stdlib_stats_distribution_normal, only: normal => rvs_normal
    use stdlib_optval, only: optval
    use stdlib_linalg, only: eye, hermitian
    ! LightKrylov
    use LightKrylov
    use LightKrylov_Logger
    use LightKrylov_Constants
    
    implicit none(type, external)
    
    private

    character(len=*), parameter :: this_module      = 'LK_TUtils'
    character(len=*), parameter :: this_module_long = 'LightKrylov_TestUtils'

    integer, parameter, public :: test_size = 128

    public :: get_data
    public :: put_data
    public :: init_rand
    public :: get_err_str

    ! Roessler
    #:for kind in REAL_KINDS
    public :: get_state_r${kind}$
    public :: roessler_analytical_fp_r${kind}$
    #:endfor

    !-----------------------------------------------
    !-----     TEST VECTOR TYPE DEFINITION     -----
    !-----------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    type, extends(abstract_vector_${type[0]}$${kind}$), public :: vector_${type[0]}$${kind}$
        ${type}$, dimension(test_size) :: data = 0.0_${kind}$
    contains
        private
        procedure, pass(self), public :: zero => init_zero_${type[0]}$${kind}$
        procedure, pass(self), public :: dot => dot_${type[0]}$${kind}$
        procedure, pass(self), public :: scal => scal_${type[0]}$${kind}$
        procedure, pass(self), public :: axpby => axpby_${type[0]}$${kind}$
        procedure, pass(self), public :: rand => rand_${type[0]}$${kind}$
        procedure, pass(self), public :: get_size => get_size_${type[0]}$${kind}$
    end type vector_${type[0]}$${kind}$

    #:endfor

    !----------------------------------------------
    !-----     TEST LINOP TYPE DEFINITION     -----
    !----------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    #:if type[0] == "r"
    type, extends(abstract_linop_${type[0]}$${kind}$), public :: linop_${type[0]}$${kind}$
        ${type}$, dimension(test_size, test_size) :: data = 0.0_${kind}$
    contains
        private
        procedure, pass(self), public :: matvec  => matvec_${type[0]}$${kind}$
        procedure, pass(self), public :: rmatvec => rmatvec_${type[0]}$${kind}$
    end type linop_${type[0]}$${kind}$
    interface linop_${type[0]}$${kind}$
        pure module function construct_linop_${type[0]}$${kind}$(data) result(A)
            implicit none(type, external)
            ${type}$, dimension(test_size, test_size), intent(in) :: data
            type(linop_${type[0]}$${kind}$) :: A
        end function construct_linop_${type[0]}$${kind}$
    end interface

    type, extends(abstract_sym_linop_${type[0]}$${kind}$), public :: spd_linop_${type[0]}$${kind}$
        ${type}$, dimension(test_size, test_size) :: data = 0.0_${kind}$
    contains
        private
        procedure, pass(self), public :: matvec => sdp_matvec_${type[0]}$${kind}$
        procedure, pass(self), public :: rmatvec => sdp_matvec_${type[0]}$${kind}$
    end type spd_linop_${type[0]}$${kind}$
    interface spd_linop_${type[0]}$${kind}$
        pure module function construct_spd_linop_${type[0]}$${kind}$(data) result(A)
            implicit none(type, external)
            ${type}$, dimension(test_size, test_size), intent(in) :: data
            type(spd_linop_${type[0]}$${kind}$) :: A
        end function construct_spd_linop_${type[0]}$${kind}$
    end interface

    #:else
    type, extends(abstract_linop_${type[0]}$${kind}$), public :: linop_${type[0]}$${kind}$
        ${type}$, dimension(test_size, test_size) :: data = zero_${type[0]}$${kind}$
    contains
        private
        procedure, pass(self), public :: matvec  => matvec_${type[0]}$${kind}$
        procedure, pass(self), public :: rmatvec => rmatvec_${type[0]}$${kind}$
    end type linop_${type[0]}$${kind}$
    interface linop_${type[0]}$${kind}$
        pure module function construct_linop_${type[0]}$${kind}$(data) result(A)
            implicit none(type, external)
            ${type}$, dimension(test_size, test_size), intent(in) :: data
            type(linop_${type[0]}$${kind}$) :: A
        end function construct_linop_${type[0]}$${kind}$
    end interface

    type, extends(abstract_hermitian_linop_${type[0]}$${kind}$), public :: hermitian_linop_${type[0]}$${kind}$
        ${type}$, dimension(test_size, test_size) :: data = zero_${type[0]}$${kind}$
    contains
        private
        procedure, pass(self), public :: matvec => hermitian_matvec_${type[0]}$${kind}$
        procedure, pass(self), public :: rmatvec => hermitian_matvec_${type[0]}$${kind}$
    end type hermitian_linop_${type[0]}$${kind}$
    interface hermitian_linop_${type[0]}$${kind}$
        pure module function construct_hermitian_linop_${type[0]}$${kind}$(data) result(A)
            implicit none(type, external)
            ${type}$, dimension(test_size, test_size), intent(in) :: data
            type(hermitian_linop_${type[0]}$${kind}$) :: A
        end function construct_hermitian_linop_${type[0]}$${kind}$
    end interface
    #:endif
    #:endfor

    ! ROESSLER SYSTEM

    #:for kind in REAL_KINDS
    real(${kind}$), parameter :: a_${kind}$ = 0.2_${kind}$
    real(${kind}$), parameter :: b_${kind}$ = 0.2_${kind}$
    real(${kind}$), parameter :: c_${kind}$ = 5.7_${kind}$

    type, extends(abstract_vector_r${kind}$), public :: state_vector_r${kind}$
       real(${kind}$) :: x = 0.0_${kind}$
       real(${kind}$) :: y = 0.0_${kind}$
       real(${kind}$) :: z = 0.0_${kind}$
    contains
       private
       procedure, pass(self), public :: zero => zero_state_r${kind}$
       procedure, pass(self), public :: dot => dot_state_r${kind}$
       procedure, pass(self), public :: scal => scal_state_r${kind}$
       procedure, pass(self), public :: axpby => axpby_state_r${kind}$
       procedure, pass(self), public :: rand => rand_state_r${kind}$
       procedure, pass(self), public :: get_size => get_size_state_r${kind}$
    end type state_vector_r${kind}$

    type, extends(abstract_system_r${kind}$), public :: roessler_r${kind}$
    contains
       private
       procedure, pass(self), public :: response => eval_roessler_r${kind}$
    end type roessler_r${kind}$

    type, extends(abstract_jacobian_linop_r${kind}$), public :: jacobian_r${kind}$
    contains
       private
       procedure, pass(self), public :: matvec => lin_roessler_r${kind}$
       procedure, pass(self), public :: rmatvec => adj_lin_roessler_r${kind}$
    end type jacobian_r${kind}$
    #:endfor

    interface get_data
        #:for kind, type in RC_KINDS_TYPES
        module procedure get_data_vec_${type[0]}$${kind}$
        module procedure get_data_vec_basis_${type[0]}$${kind}$
        module procedure get_data_linop_${type[0]}$${kind}$
        #:endfor
    end interface

    interface put_data
        #:for kind, type in RC_KINDS_TYPES
        module procedure put_data_vec_${type[0]}$${kind}$
        module procedure put_data_vec_basis_${type[0]}$${kind}$
        module procedure put_data_linop_${type[0]}$${kind}$
        #:endfor
    end interface

    interface init_rand
        #:for kind, type in RC_KINDS_TYPES
        module procedure init_rand_vec_${type[0]}$${kind}$
        module procedure init_rand_basis_${type[0]}$${kind}$
        module procedure init_rand_linop_${type[0]}$${kind}$
        #:if type[0] == "r"
        module procedure init_rand_spd_linop_${type[0]}$${kind}$
        #:else
        module procedure init_rand_hermitian_linop_${type[0]}$${kind}$
        #:endif
        #:endfor
    end interface

    interface get_err_str
        #:for kind, type in REAL_KINDS_TYPES
        module procedure get_err_str_${kind}$
        #:endfor
    end interface

contains

    !--------------------------------
    !-----     CONSTRUCTORS     -----
    !--------------------------------

    #:for kind, type in RC_KINDS_TYPES
    module procedure construct_linop_${type[0]}$${kind}$
    A%data = data
    end procedure construct_linop_${type[0]}$${kind}$

    #:if type[0] == "r"
    module procedure construct_spd_linop_${type[0]}$${kind}$
    A%data = data
    end procedure construct_spd_linop_${type[0]}$${kind}$
    #:else
    module procedure construct_hermitian_linop_${type[0]}$${kind}$
    A%data = data
    end procedure construct_hermitian_linop_${type[0]}$${kind}$
    #:endif
    #:endfor

    !----------------------------------------------------------
    !-----     TYPE-BOUND PROCEDURES FOR TEST VECTORS     -----
    !----------------------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    subroutine init_zero_${type[0]}$${kind}$(self)
        class(vector_${type[0]}$${kind}$), intent(inout) :: self
        self%data = 0.0_${kind}$
    end subroutine init_zero_${type[0]}$${kind}$

    function dot_${type[0]}$${kind}$(self, vec) result(alpha)
        class(vector_${type[0]}$${kind}$), intent(in) :: self
        class(abstract_vector_${type[0]}$${kind}$), intent(in) :: vec
        ${type}$ :: alpha
        select type(vec)
        type is(vector_${type[0]}$${kind}$)
            alpha = dot_product(self%data, vec%data)
        class default
            call type_error('vec','vector_${type[0]}$${kind}$','IN',this_module,'dot_${type[0]}$${kind}$')
        end select
    end function dot_${type[0]}$${kind}$

    integer function get_size_${type[0]}$${kind}$(self) result(N)
        class(vector_${type[0]}$${kind}$), intent(in) :: self
        N = test_size
    end function get_size_${type[0]}$${kind}$

    subroutine scal_${type[0]}$${kind}$(self, alpha)
        class(vector_${type[0]}$${kind}$), intent(inout) :: self
        ${type}$, intent(in) :: alpha
        self%data = alpha * self%data
    end subroutine scal_${type[0]}$${kind}$

    subroutine axpby_${type[0]}$${kind}$(alpha, vec, beta, self)
        class(vector_${type[0]}$${kind}$), intent(inout) :: self
        class(abstract_vector_${type[0]}$${kind}$), intent(in) :: vec
        ${type}$, intent(in) :: alpha, beta
        select type(vec)
        type is(vector_${type[0]}$${kind}$)
            self%data = alpha*vec%data + beta*self%data
        class default
            call type_error('vec','vector_${type[0]}$${kind}$','IN',this_module,'axpby_${type[0]}$${kind}$')
        end select
    end subroutine axpby_${type[0]}$${kind}$

    subroutine rand_${type[0]}$${kind}$(self, ifnorm)
        class(vector_${type[0]}$${kind}$), intent(inout) :: self
        logical, optional, intent(in) :: ifnorm
        logical :: normalized
        ${type}$ :: mu(test_size), var(test_size)
        ${type}$ :: alpha
 
        mu = 0.0_${kind}$
        #:if type[0] == "r"
        var = 1.0_${kind}$
        #:else
        var = cmplx(1.0_${kind}$, 1.0_${kind}$, kind=${kind}$)
        #:endif
        self%data = normal(mu, var)
 
        normalized = optval(ifnorm, .false.)
        if (normalized) then
            alpha = self%norm()
            call self%scal(1.0_${kind}$/alpha)
        endif
    end subroutine rand_${type[0]}$${kind}$

    #:endfor
    !---------------------------------------------------------
    !-----     TYPE-BOUND PROCEDURES FOR TEST LINOPS     -----
    !---------------------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    subroutine matvec_${type[0]}$${kind}$(self, vec_in, vec_out)
        class(linop_${type[0]}$${kind}$), intent(inout)  :: self
        class(abstract_vector_${type[0]}$${kind}$)       , intent(in)  :: vec_in
        class(abstract_vector_${type[0]}$${kind}$)       , intent(out) :: vec_out
        select type(vec_in)
        type is(vector_${type[0]}$${kind}$)
            select type(vec_out)
            type is(vector_${type[0]}$${kind}$)

                vec_out%data = matmul(self%data, vec_in%data)

            class default
                call type_error('vec_out','vector_${type[0]}$${kind}$','OUT',this_module,'matvec_${type[0]}$${kind}$')
            end select
        class default
            call type_error('vec_in','vector_${type[0]}$${kind}$','IN',this_module,'matvec_${type[0]}$${kind}$')
        end select
    end subroutine matvec_${type[0]}$${kind}$

    subroutine rmatvec_${type[0]}$${kind}$(self, vec_in, vec_out)
        class(linop_${type[0]}$${kind}$), intent(inout)  :: self
        class(abstract_vector_${type[0]}$${kind}$)       , intent(in)  :: vec_in
        class(abstract_vector_${type[0]}$${kind}$)       , intent(out) :: vec_out
        select type(vec_in)
        type is(vector_${type[0]}$${kind}$)
            select type(vec_out)
            type is(vector_${type[0]}$${kind}$)

                vec_out%data = matmul(hermitian(self%data), vec_in%data)

            class default
                call type_error('vec_out','vector_${type[0]}$${kind}$','OUT',this_module,'rmatvec_${type[0]}$${kind}$')
            end select
        class default
            call type_error('vec_in','vector_${type[0]}$${kind}$','IN',this_module,'rmatvec_${type[0]}$${kind}$')
        end select
    end subroutine rmatvec_${type[0]}$${kind}$

    #:if type[0] == "r"
    subroutine sdp_matvec_${type[0]}$${kind}$(self, vec_in, vec_out)
        class(spd_linop_${type[0]}$${kind}$), intent(inout)  :: self
        class(abstract_vector_${type[0]}$${kind}$)       , intent(in)  :: vec_in
        class(abstract_vector_${type[0]}$${kind}$)       , intent(out) :: vec_out
        select type(vec_in)
        type is(vector_${type[0]}$${kind}$)
            select type(vec_out)
            type is(vector_${type[0]}$${kind}$)

                vec_out%data = matmul(self%data, vec_in%data)

            class default
                call type_error('vec_out','vector_${type[0]}$${kind}$','OUT',this_module,'spd_matvec_${type[0]}$${kind}$')
            end select
        class default
            call type_error('vec_in','vector_${type[0]}$${kind}$','IN',this_module,'spd_matvec_${type[0]}$${kind}$')
        end select
    end subroutine sdp_matvec_${type[0]}$${kind}$
    #:else
    subroutine hermitian_matvec_${type[0]}$${kind}$(self, vec_in, vec_out)
        class(hermitian_linop_${type[0]}$${kind}$), intent(inout)  :: self
        class(abstract_vector_${type[0]}$${kind}$)       , intent(in)  :: vec_in
        class(abstract_vector_${type[0]}$${kind}$)       , intent(out) :: vec_out
        select type(vec_in)
        type is(vector_${type[0]}$${kind}$)
            select type(vec_out)
            type is(vector_${type[0]}$${kind}$)

                vec_out%data = matmul(self%data, vec_in%data)

            class default
                call type_error('vec_out','vector_${type[0]}$${kind}$','OUT',this_module,'hermitian_matvec_${type[0]}$${kind}$')
            end select
        class default
            call type_error('vec_in','vector_${type[0]}$${kind}$','IN',this_module,'hermitian_matvec_${type[0]}$${kind}$')
        end select
    end subroutine hermitian_matvec_${type[0]}$${kind}$
    #:endif

    #:endfor
    !----------------------------------------------------
    !-----     EXTRACT DATA FROM ABSTRACT TYPES     -----
    !----------------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    subroutine get_data_vec_${type[0]}$${kind}$(vec_out, vec_in)
        ${type}$, intent(out) :: vec_out(:)
        type(vector_${type[0]}$${kind}$), intent(in) :: vec_in
        vec_out = vec_in%data
    end subroutine get_data_vec_${type[0]}$${kind}$

    subroutine get_data_vec_basis_${type[0]}$${kind}$(basis_out, basis_in)
        ${type}$, intent(out) :: basis_out(:, :)
        type(vector_${type[0]}$${kind}$), intent(in) :: basis_in(:)
        ! Internal variables.
        integer :: k
        do k = 1, size(basis_in)
            basis_out(:, k) = basis_in(k)%data
        enddo
    end subroutine get_data_vec_basis_${type[0]}$${kind}$

    subroutine get_data_linop_${type[0]}$${kind}$(mat_out, linop_in)
        ${type}$, intent(out) :: mat_out(:, :)
        type(linop_${type[0]}$${kind}$), intent(in) :: linop_in
        mat_out = linop_in%data
    end subroutine get_data_linop_${type[0]}$${kind}$

    #:endfor
    !----------------------------------------------
    !-----     PUT DATA TO ABSTRACT TYPES     -----
    !----------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    subroutine put_data_vec_${type[0]}$${kind}$(vec_out, vec_in)
        type(vector_${type[0]}$${kind}$), intent(out) :: vec_out
        ${type}$, intent(in) :: vec_in
        vec_out%data = vec_in
    end subroutine put_data_vec_${type[0]}$${kind}$

    subroutine put_data_vec_basis_${type[0]}$${kind}$(basis_out, basis_in)
        type(vector_${type[0]}$${kind}$), intent(out) :: basis_out(:)
        ${type}$, intent(in) :: basis_in(:, :)
        ! Internal variables.
        integer :: k
        do k = 1, size(basis_out)
            basis_out(k)%data = basis_in(:, k)
        enddo
    end subroutine put_data_vec_basis_${type[0]}$${kind}$

    subroutine put_data_linop_${type[0]}$${kind}$(linop_out, mat_in)
        type(linop_${type[0]}$${kind}$), intent(out) :: linop_out
        ${type}$, intent(in) :: mat_in(:, :)
        ! Internal variables.
        linop_out%data = mat_in
    end subroutine put_data_linop_${type[0]}$${kind}$

    #:endfor
    !--------------------------------------------------------------
    !-----     INITIALIZE ABSTRACT TYPES WITH RANDOM DATA     -----
    !--------------------------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    subroutine init_rand_vec_${type[0]}$${kind}$(x)
        type(vector_${type[0]}$${kind}$), intent(inout) :: x
        call x%rand()
    end subroutine init_rand_vec_${type[0]}$${kind}$

    subroutine init_rand_basis_${type[0]}$${kind}$(X)
        type(vector_${type[0]}$${kind}$), intent(inout) :: X(:)
        integer :: i
        do i = 1, size(X)
            call X(i)%rand()
        enddo
    end subroutine init_rand_basis_${type[0]}$${kind}$

    subroutine init_rand_linop_${type[0]}$${kind}$(linop)
        type(linop_${type[0]}$${kind}$), intent(inout) :: linop
        ${type}$, allocatable :: mu(:, :), var(:, :)
        allocate(mu(test_size, test_size)) ; mu = 0.0_${kind}$
        allocate(var(test_size, test_size))
        #:if type[0] == "r"
        var = 1.0_${kind}$
        #:else
        var = cmplx(1.0_${kind}$, 1.0_${kind}$, kind=${kind}$)
        #:endif
        linop%data = normal(mu, var)
    end subroutine init_rand_linop_${type[0]}$${kind}$

    #:if type[0] == "r"
    subroutine init_rand_spd_linop_${type[0]}$${kind}$(linop)
        type(spd_linop_${type[0]}$${kind}$), intent(inout) :: linop
        ${type}$, allocatable :: mu(:, :), var(:, :)
        ${type}$, allocatable :: data(:, :)
        allocate(mu(test_size, test_size)) ; mu = zero_${type[0]}$${kind}$
        allocate(var(test_size, test_size)) ; var = one_${type[0]}$${kind}$
        data = normal(mu, var)
        linop%data = matmul(data, transpose(data))/test_size + 0.01_${kind}$*eye(test_size, mold=1.0_${kind}$)
    end subroutine init_rand_spd_linop_${type[0]}$${kind}$
    #:else
    subroutine init_rand_hermitian_linop_${type[0]}$${kind}$(linop)
        type(hermitian_linop_${type[0]}$${kind}$), intent(inout) :: linop
        ${type}$, allocatable :: data(:, :)
        ${type}$, allocatable :: mu(:, :), var(:, :)

        allocate(mu(test_size, test_size)) ; mu = 0.0_${kind}$
        allocate(var(test_size, test_size)) ; var = cmplx(1.0_${kind}$, 1.0_${kind}$, kind=${kind}$)

        data = normal(mu, var)
        data = matmul(data, hermitian(data))/test_size + 0.01_${kind}$*eye(test_size, mold=1.0_${kind}$)
        linop%data = data
    end subroutine init_rand_hermitian_linop_${type[0]}$${kind}$
    #:endif

    #:endfor

    #:for kind, type in REAL_KINDS_TYPES
    subroutine get_err_str_${kind}$(msg, info, err)
        character(len=*), intent(inout) :: msg
        character(len=*), intent(in)    :: info
        real(${kind}$), intent(in) :: err
        ! internals
        character(len=9) :: value_str
        character(len=*), parameter :: indent = repeat(" ", 4)
        write(value_str, '(E9.2)') err
        msg = indent // info // value_str // achar(10)
    end subroutine get_err_str_${kind}$

    #:endfor
    !-----------------------------------------------
    !-----     ROESSLER SYSTEM TYPE DEFINITION     -----
    !-----------------------------------------------
 
    #:for kind in REAL_KINDS
    subroutine zero_state_r${kind}$(self)
        class(state_vector_r${kind}$), intent(inout) :: self
        self%x = 0.0_${kind}$
        self%y = 0.0_${kind}$
        self%z = 0.0_${kind}$
    end subroutine zero_state_r${kind}$
  
    real(${kind}$) function dot_state_r${kind}$(self, vec) result(alpha)
        class(state_vector_r${kind}$)   , intent(in) :: self
        class(abstract_vector_r${kind}$), intent(in) :: vec
        select type(vec)
        type is(state_vector_r${kind}$)
            alpha = self%x*vec%x + self%y*vec%y + self%z*vec%z
        class default
            call type_error('vec','state_vector_${type[0]}$${kind}$','IN',this_module,'dot_state_r${kind}$')
        end select
    end function dot_state_r${kind}$
  
    subroutine scal_state_r${kind}$(self, alpha)
        class(state_vector_r${kind}$), intent(inout) :: self
        real(${kind}$)               , intent(in)    :: alpha
        self%x = self%x * alpha
        self%y = self%y * alpha
        self%z = self%z * alpha
    end subroutine scal_state_r${kind}$
  
    subroutine axpby_state_r${kind}$(alpha, vec, beta, self)
        class(state_vector_r${kind}$)   , intent(inout) :: self
        class(abstract_vector_r${kind}$), intent(in)    :: vec
        real(${kind}$)                  , intent(in)    :: alpha, beta
        select type(vec)
        type is(state_vector_r${kind}$)
            self%x = beta*self%x + alpha*vec%x
            self%y = beta*self%y + alpha*vec%y
            self%z = beta*self%z + alpha*vec%z
        class default
            call type_error('vec','state_vector_${type[0]}$${kind}$','IN',this_module,'axpby_state_r${kind}$')
        end select
    end subroutine axpby_state_r${kind}$
  
    integer function get_size_state_r${kind}$(self) result(N)
        class(state_vector_r${kind}$), intent(in) :: self
        N = 3
    end function get_size_state_r${kind}$
  
    subroutine rand_state_r${kind}$(self, ifnorm)
        class(state_vector_r${kind}$), intent(inout) :: self
        logical, optional,   intent(in)        :: ifnorm
        logical :: normalized
        real(${kind}$) :: mu, var
        real(${kind}$) :: alpha
    
        mu = zero_r${kind}$
        var = one_r${kind}$
        self%x = normal(mu, var)
        self%y = normal(mu, var)
        self%z = normal(mu, var)
    
        normalized = optval(ifnorm, .false.)
        if (normalized) then
            alpha = self%norm()
            call self%scal(one_r${kind}$/alpha)
        endif
    end subroutine rand_state_r${kind}$

    #:endfor

    #:for kind in REAL_KINDS
    subroutine eval_roessler_r${kind}$(self, vec_in, vec_out, atol)
        class(roessler_r${kind}$),            intent(inout)  :: self
        class(abstract_vector_r${kind}$), intent(in)  :: vec_in
        class(abstract_vector_r${kind}$), intent(out) :: vec_out
        real(${kind}$),                    intent(in)  :: atol

        select type(vec_in)
        type is(state_vector_r${kind}$)
            select type(vec_out)
            type is(state_vector_r${kind}$)

                vec_out%x = -vec_in%y - vec_in%z
                vec_out%y = vec_in%x + a_${kind}$ * vec_in%y
                vec_out%z = b_${kind}$ + vec_in%z * (vec_in%x - c_${kind}$)

            class default
                call type_error('vec_out','state_vector_${type[0]}$${kind}$','OUT',this_module,'eval_roessler_r${kind}$')
            end select
        class default
            call type_error('vec_in','state_vector_${type[0]}$${kind}$','IN',this_module,'eval_roessler_r${kind}$')
        end select
    end subroutine eval_roessler_r${kind}$

    subroutine get_state_r${kind}$(state, X, Y, Z)
        class(abstract_vector_r${kind}$),   intent(in)  :: state
        real(${kind}$),                 intent(out) :: X, Y, z
        select type (state)
        type is (state_vector_r${kind}$)
            X = state%x
            Y = state%y
            Z = state%z
        class default
            call type_error('state','state_vector_${type[0]}$${kind}$','IN',this_module,'get_state_r${kind}$')
        end select
    end subroutine get_state_r${kind}$

    subroutine lin_roessler_r${kind}$(self, vec_in, vec_out)
        class(jacobian_r${kind}$),            intent(inout)  :: self
        class(abstract_vector_r${kind}$), intent(in)  :: vec_in
        class(abstract_vector_r${kind}$), intent(out) :: vec_out
        ! internal
        real(${kind}$) :: X, Y, Z

        call get_state_r${kind}$(self%X, X, Y, Z)
        select type(vec_in)
        type is(state_vector_r${kind}$)
            select type(vec_out)
            type is(state_vector_r${kind}$)

                vec_out%x = -vec_in%y - vec_in%z
                vec_out%y =  vec_in%x + a_${kind}$*vec_in%y
                vec_out%z =  vec_in%x*Z + vec_in%z*(X - c_${kind}$)

            class default
                call type_error('vec_out','state_vector_${type[0]}$${kind}$','OUT',this_module,'lin_roessler_r${kind}$')
            end select
        class default
            call type_error('vec_in','state_vector_${type[0]}$${kind}$','IN',this_module,'lin_roessler_r${kind}$')
        end select
    end subroutine lin_roessler_r${kind}$

    subroutine adj_lin_roessler_r${kind}$(self, vec_in, vec_out)
        class(jacobian_r${kind}$),            intent(inout)  :: self
        class(abstract_vector_r${kind}$), intent(in)  :: vec_in
        class(abstract_vector_r${kind}$), intent(out) :: vec_out
        ! internal
        real(${kind}$) :: X, Y, Z
        
        call get_state_r${kind}$(self%X, X, Y, Z)
        select type(vec_in)
        type is(state_vector_r${kind}$)
            select type(vec_out)
            type is(state_vector_r${kind}$) 

                vec_out%x =  vec_in%y + vec_in%z*Z
                vec_out%y = -vec_in%x + a_${kind}$*vec_in%y
                vec_out%z = -vec_in%x + vec_in%z*(X - c_${kind}$)

            class default
                call type_error('vec_out','state_vector_${type[0]}$${kind}$','OUT',this_module,'adj_lin_roessler_r${kind}$')
            end select
        class default
            call type_error('vec_in','state_vector_${type[0]}$${kind}$','IN',this_module,'adj_lin_roessler_r${kind}$')
        end select
    end subroutine adj_lin_roessler_r${kind}$

    subroutine roessler_analytical_fp_r${kind}$(fp1, fp2)
        class(state_vector_r${kind}$), intent(out) :: fp1, fp2
        ! internal
        real(${kind}$) :: d

        d = sqrt(c_${kind}$**2 - 4*a_${kind}$*b_${kind}$)

        fp1%x = ( c_${kind}$ - d)/ 2
        fp1%y = (-c_${kind}$ + d)/(2*a_${kind}$)
        fp1%z = ( c_${kind}$ - d)/(2*a_${kind}$)

        fp2%x = ( c_${kind}$ + d)/ 2
        fp2%y = (-c_${kind}$ - d)/(2*a_${kind}$)
        fp2%z = ( c_${kind}$ + d)/(2*a_${kind}$)
    end subroutine roessler_analytical_fp_r${kind}$

    #:endfor
end module LightKrylov_TestUtils
