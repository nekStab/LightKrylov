#:include "../include/common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
module lightkrylov_utils
    !!  This module provides a set of utility functions used throughout `LightKrylov`.
    !!  It includes:
    !!
    !!  - `assert_shape`: Assert that the shape of the argument is the expected shape.
    !!  - `eig`: Compute the eigenvalue decomposition of a general matrix.
    !!  - `sqrtm`: Compute the non-negative square root of a symmetric positive definite matrix using its SVD.
    !!  - `sqrtm_eig`: Compute the non-negative square root of a symmetric positive definite matrix using its eigenvalue decomposition.
    !!  - `schur`: Compute the Schur factorization of a general square matrix.
    !!  - `ordschur`: Re-order the Schur factorization to have the selected eigenvalues in the upper left block.
    !!
    !!  Note that as the development of `stdlib` progresses, some of these functions
    !!  will be deprecated in favor of the `stdlib` implementations.

    !--------------------------------------------
    !-----     Standard Fortran Library     -----
    !--------------------------------------------
    use iso_fortran_env, only: output_unit
    use stdlib_optval, only: optval
    use stdlib_strings, only: padr
    use stdlib_linalg, only: is_hermitian, is_symmetric, diag, svd, eigh
    ! Eigenvalue problem.
    use stdlib_linalg_lapack, only: geev
    ! Schur factorization.
    use stdlib_linalg_lapack, only: gees, trsen

    !-------------------------------
    !-----     LightKrylov     -----
    !-------------------------------
    ! Various constants.
    use LightKrylov_Logger
    use LightKrylov_Constants

    implicit none
    private

    character(len=*), parameter :: this_module      = 'LK_Utils'
    character(len=*), parameter :: this_module_long = 'LightKrylov_Utils'

    public :: assert_shape, norml, log2
    ! Compute AX = XD for general dense matrices.
    public :: eig
    ! Compute matrix sqrt of input symmetric/hermitian positive definite matrix A
    public :: sqrtm
    public :: sqrtm_eig
    ! Compute AX = XS where S is in Schur form.
    public :: schur
    ! Re-orders the Schur factorization of A.
    public :: ordschur

    interface assert_shape
        !! This interface provides methods to assert that the shape of its input vector
        !! or matrix is the expected shape. It throws an error if not.
        #:for kind, type in RC_KINDS_TYPES
        module procedure assert_shape_vector_${type[0]}$${kind}$
        module procedure assert_shape_matrix_${type[0]}$${kind}$
        #:endfor
    end interface

    interface norml
        !! This interface provides methods to compute the infinity norm of a matrix.
        !! Note that it'll eventually be superseeded by the `stdlib` implementation.
        #:for kind, type in RC_KINDS_TYPES
        module procedure norml_${type[0]}$${kind}$
        #:endfor
    end interface

    interface log2
        !! Utility function to compute the base-2 logarithm of a real number.
        #:for kind, type in REAL_KINDS_TYPES
        module procedure log2_${type[0]}$${kind}$
        #:endfor
    end interface

    interface eig
        !!  Computes the eigenvalue decomposition of a general square matrix.
        !!
        !!  ### Description
        !!
        !!  This interface provides methods to compute the solution to the eigenproblem
        !!  \( \mathbf{Ax} = \lambda \mathbf{x} \), where $\mathbf{A}$ is a square `real`
        !!  or `complex` matrix.
        !!
        !!  Result array `lambda` returns the eigenvalues of \( \mathbf{A} \), while `vecs`
        !!  returns the corresponding eigenvectors. Note that it follows the LAPACK convention
        !!  when \( \mathbf{A} \) is `real`. The solver is based on LAPACK's `*GEEV` backends.
        !!
        !!  ### Syntax
        !!
        !!  `call eig(A, vecs, lambda)`
        !!
        !!  ### Arguments
        !!
        !!  `A`: `real` or `complex` square array containing the coefficient matrix. It is an `intent(in)` argument.
        !!
        !!  `vecs`: Square array of the same size, type, and kind as `A` containing the eigenvectors
        !!  (following LAPACK's convention for `real` matrices). It is an `intent(out)` argument.
        !!
        !!  `lambda`: `complex` rank-1 array of the same kind as `A` containing the eigenvalues.
        !!  It is an `intent(out)` argument.
        !!
        !!  @note
        !!  Due to the abstrct nature of the vector types defined in `LightKrylov`, it is unlikely
        !!  that this implementation will be superseeded in favor of the `stdlib` one as the latter
        !!  does not follow the LAPACK's convention.
        !!  @endnote
        #:for kind, type in RC_KINDS_TYPES
        module procedure eig_${type[0]}$${kind}$
        #:endfor
    end interface

    interface schur
        !!  Computes the Schur factorization of a general square matrix.
        !!
        !!  ### Description
        !!
        !!  This interface provides methods to compute the Schur factorization of a `real` or
        !!  `complex` square matrix. Note that, if \( \mathbf{A} \) is `real`, it returns the
        !!  real Schur form.
        !!
        !!  Result array `eigvals` returns the eigenvalues of \( \mathbf{A} \) while `Z`
        !!  contains the Schur basis.
        !!
        !!  ### Syntax
        !!
        !!  `call schur(A, Z, eigvals)`
        !!
        !!  ### Arguments
        !!
        !!  `A`: `real` or `complex` square array containing the coefficient matrix. On exit, it
        !!  is overwritten with its (real) Schur factorization. It is an `intent(inout)` argument.
        !!  
        !!  `Z`: Two-dimensional square array of the same size, type and kind as `A`. It contains
        !!  the Schur basis. It is an `intent(out)` argument.
        !!
        !!  `eigvals`: `complex` rank-1 array of the same kind as `A` containing the eigenvalues.
        !!  It is an `intent(out)` arguement.
        #:for kind, type in RC_KINDS_TYPES
        module procedure schur_${type[0]}$${kind}$
        #:endfor
    end interface

    interface ordschur
        !!  Given the Schur factorization and basis of a matrix, reorders it to have the selected
        !!  eigenvalues in the upper left block.
        !!
        !!  ### Description
        !!
        !!  This interface provides methods to re-order the Schur factorization of a `real` or
        !!  `complex` square matrix. Note that, if \( \mathbf{A} \) is `real`, it returns the
        !!  real Schur form.
        !!
        !!  ### Syntax
        !!
        !!  `call ordschur(T, Q, selected)`
        !!
        !!  ### Arguments
        !!
        !!  `T`: `real` or `complex` square array containing the Schur factorization of a matrix. 
        !!  On exit, it is overwritten with its re-ordered counterpart. It is an `intent(inout)` argument.
        !!  
        !!  `Q`: Two-dimensional square array of the same size, type and kind as `A`. It contains
        !!  the original Schur basis on entry and the re-ordered one on exit.
        !!  It is an `intent(inout)` argument.
        !!
        !!  `selected`: `logical` rank-1 array selecting which eigenvalues need to be moved in the
        !!  upper left block of the Schur factorization.
        !!  It is an `intent(in)` arguement.
        #:for kind, type in RC_KINDS_TYPES
        module procedure ordschur_${type[0]}$${kind}$
        #:endfor
    end interface

    interface sqrtm
        !!  Computes the non-negative square root of a symmetric positive definite matrix
        !!  using its singular value decomposition.
        !!
        !!  ### Description
        !!
        !!  This interface provides methods to compute the non-negative square root of a symmetric
        !!  (hermitian) positive definite matrix \( \mathbf{A} \).
        !!
        !!  ### Syntax
        !!
        !!  `call sqrtm(A, sqrtmA, info)`
        !!
        !!  ### Arguments
        !!  
        !!  `A`: Symmetric (hermitian) positive definite matrix whose non-negative square root
        !!  needs to be computed. It is an `intent(in)` argument.
        !!
        !!  `sqrtmA`: Non-negative square root of `A`. It has the same size, kind and type as `A`.
        !!  It is an `intent(out)` argument.
        !!
        !!  `info`: Information flag. It is an `intent(out)` argument.
        #:for kind, type in RC_KINDS_TYPES
        module procedure sqrtm_${type[0]}$${kind}$
        #:endfor
    end interface

    interface sqrtm_eig
        !!  Computes the non-negative square root of a symmetric positive definite matrix
        !!  using its eigenvalue decomposition.
        !!
        !!  ### Description
        !!
        !!  This interface provides methods to compute the non-negative square root of a symmetric
        !!  (hermitian) positive definite matrix \( \mathbf{A} \).
        !!
        !!  ### Syntax
        !!
        !!  `call sqrtm_eig(A, sqrtmA, info)`
        !!
        !!  ### Arguments
        !!  
        !!  `A`: Symmetric (hermitian) positive definite matrix whose non-negative square root
        !!  needs to be computed. It is an `intent(in)` argument.
        !!
        !!  `sqrtmA`: Non-negative square root of `A`. It has the same size, kind and type as `A`.
        !!  It is an `intent(out)` argument.
        !!
        !!  `info`: Information flag. It is an `intent(out)` argument.
        #:for kind, type in RC_KINDS_TYPES
        module procedure sqrtm_eig_${type[0]}$${kind}$
        #:endfor
    end interface

    !------------------------------------------------
    !-----     OPTS TYPE FOR LINEAR SOLVERS     -----
    !------------------------------------------------

    type, abstract, public :: abstract_opts
        !! Abstract type container for options from which all others are being extended.
    end type

    #:for kind in REAL_KINDS
    type, extends(abstract_opts), public :: gmres_${kind}$_opts
        !! GMRES options.
        integer :: kdim = 30
        !! Dimension of the Krylov subspace (default: 30).
        integer :: maxiter = 10
        !! Maximum number of `gmres` restarts (default: 10).
        logical :: if_print_metadata = .false.
        !! Print interation metadata on exit (default = .false.)
        logical :: sanity_check = .true.
        !! Whether to perform an extra matrix-vector product for sanity check.
    end type

    type, extends(abstract_opts), public :: cg_${kind}$_opts
        !! Conjugate gradient options.
        integer :: maxiter = 100
        !! Maximum number of `cg` iterations (default: 100).
        logical :: if_print_metadata = .false.
        !! Print interation metadata on exit (default = .false.)
    end type

    type, extends(abstract_opts), public :: newton_${kind}$_opts
        !! Options for Newton-Krylov fixed-point iteration.
        integer :: maxiter = 100
        !! Maximum number of Newton iterations (default = 100)
        logical :: ifbisect = .false.
        !! Bisection toggle to enforce residual reduction (default = .false.)
        integer :: maxstep_bisection = 5
        !! Maximum number of bisections (evaluations of F) for step selection (default = 5)
        !! Ignored if ifbisect = .false.
        logical :: if_print_metadata = .false.
        !! Print interation metadata on exit (default = .false.)
    end type
    
    #:endfor

    type, abstract, public :: abstract_metadata
        !! Abstract type container for solver metadata from with all others are extended.
    contains
        procedure(abstract_print_metadata), pass(self), deferred, public :: print
        procedure(abstract_reset_metadata), pass(self), deferred, public :: reset
    end type

    abstract interface
        subroutine abstract_print_metadata(self, reset_counters, verbose)
            import abstract_metadata
            class(abstract_metadata), intent(inout) :: self
            logical, optional, intent(in) :: reset_counters
            !! Reset all counters to zero after printing?
            logical, optional, intent(in) :: verbose
            !! Print the residual full residual history?
        end subroutine abstract_print_metadata
        subroutine abstract_reset_metadata(self)
            import abstract_metadata
            class(abstract_metadata), intent(inout) :: self
        end subroutine abstract_reset_metadata
    end interface

    #:for kind in REAL_KINDS
    type, extends(abstract_metadata), public :: gmres_${kind}$_metadata
        !! GMRES metadata.
        integer :: n_iter = 0
        !! Iteration counter
        integer :: n_inner = 0
        !! Number of inner iterations
        integer :: n_outer = 0
        !! Number of outer iterations
        real(${kind}$), dimension(:), allocatable :: res
        !! Residual history
        logical :: converged = .false.
        !! Convergence flag
        integer :: info = 0
        !! Copy of the information flag for completeness
    contains
        procedure, pass(self), public :: print => print_gmres_${kind}$
        procedure, pass(self), public :: reset => reset_gmres_${kind}$
    end type

    type, extends(abstract_metadata), public :: cg_${kind}$_metadata
        !! Conjugate gradient metadata.
        integer :: n_iter = 0
        !! Iteration counter
        real(${kind}$), dimension(:), allocatable :: res
        !! Residual history
        logical :: converged = .false.
        !! Convergence flag
        integer :: info = 0
        !! Copy of the information flag for completeness
    contains
        procedure, pass(self), public :: print => print_cg_${kind}$
        procedure, pass(self), public :: reset => reset_cg_${kind}$
    end type

    type, extends(abstract_metadata), public :: newton_${kind}$_metadata
        !! Metadata for Newton-Krylov fixed-point iteration.
        integer :: n_iter = 0
        !! Iteration counter
        integer :: eval_counter_record = 0
        !! System response evaluation counter:
        !! N.B.: For each of these evals the current residual and tolerance are recorded.
        real(${kind}$), dimension(:), allocatable :: res
        !! Residual history
        real(${kind}$), dimension(:), allocatable :: tol
        !! Tolerance history
        logical :: converged = .false.
        !! Convergence flag
        logical :: new_solution = .true.
        !! Was a new solution computed (false in case of lucky convergence)
        integer :: info = 0
        !! Copy of the information flag for completeness
    contains
        procedure, pass(self), public :: print => print_newton_${kind}$
        procedure, pass(self), public :: reset => reset_newton_${kind}$
        procedure, pass(self), public :: record => record_data_${kind}$
    end type
   
    #:endfor

contains

    !------------------------------------------------------
    !-----     TYPE BOUND PROCEDURES FOR METADATA     -----
    !------------------------------------------------------

    #:for kind in REAL_KINDS
    subroutine print_gmres_${kind}$(self, reset_counters, verbose)
        class(gmres_${kind}$_metadata), intent(inout) :: self
        logical, optional, intent(in) :: reset_counters
        !! Reset all counters to zero after printing?
        logical, optional, intent(in) :: verbose
        !! Print the residual full residual history?
        ! internals
        integer :: i
        logical :: ifreset, ifverbose
        character(len=128) :: msg

        ifreset   = optval(reset_counters, .false.)
        ifverbose = optval(verbose, .false.)
  
        write(msg,'(A30,I6,"  (",I6,"/",I3,")")') padr('Iterations   (inner/outer): ', 30), &
                  & self%n_iter, self%n_inner, self%n_outer
        call logger%log_message(msg, module=this_module, procedure='gmres_metadata')
        if (ifverbose) then
            write(msg,'(14X,A15)') 'Residual'
            call logger%log_message(msg, module=this_module, procedure='gmres_metadata')
            write(msg,'(A14,E15.8)') '   INIT:', self%res(1)
            call logger%log_message(msg, module=this_module, procedure='gmres_metadata')
            do i = 1, self%n_iter
               write(msg,'(A,I3,A,E20.8)') '   Step ', i, ': ', self%res(i)
               call logger%log_message(msg, module=this_module, procedure='gmres_metadata')
            end do
        else
            write(msg,'(A30,I20)') padr('Number of records: ', 30), size(self%res)
            call logger%log_message(msg, module=this_module, procedure='gmres_metadata')
            write(msg,'(A30,E20.8)') padr('Residual: ', 30), self%res(size(self%res))
            call logger%log_message(msg, module=this_module, procedure='gmres_metadata')
        end if
        if (self%converged) then
            call logger%log_message('Status: CONVERGED', module=this_module, procedure='gmres_metadata')
        else
            call logger%log_message('Status: NOT CONVERGED', module=this_module, procedure='gmres_metadata')
        end if
        if (ifreset) call self%reset()
        return
    end subroutine print_gmres_${kind}$

    subroutine reset_gmres_${kind}$(self)
        class(gmres_${kind}$_metadata), intent(inout) :: self
        self%n_iter = 0
        self%n_inner = 0
        self%n_outer = 0
        self%converged = .false.
        self%info = 0
        if (allocated(self%res)) deallocate(self%res)
        return
    end subroutine reset_gmres_${kind}$

    subroutine print_cg_${kind}$(self, reset_counters, verbose)
        class(cg_${kind}$_metadata), intent(inout) :: self
        logical, optional, intent(in) :: reset_counters
        !! Reset all counters to zero after printing?
        logical, optional, intent(in) :: verbose
        !! Print the residual full residual history?
        ! internals
        integer :: i
        logical :: ifreset, ifverbose
        character(len=128) :: msg

        ifreset   = optval(reset_counters, .false.)
        ifverbose = optval(verbose, .false.)

        write(msg,'(A30,I20)') padr('Iterations: ', 30), self%n_iter
        call logger%log_message(msg, module=this_module, procedure='cg_metadata')
        if (ifverbose) then
            write(msg,'(14X,A15)') 'Residual'
            call logger%log_message(msg, module=this_module, procedure='cg_metadata')
            call logger%log_message('Residual history:', module=this_module, procedure='cg_metadata')
            write(msg,'(A14,E15.8)') '   INIT:', self%res(1)
            call logger%log_message(msg, module=this_module, procedure='cg_metadata')
            do i = 2, self%n_iter+1
               write(msg,'(A,I4,A,E15.8)') '   Step ', i-1, ': ', self%res(i)
               call logger%log_message(msg, module=this_module, procedure='cg_metadata')
            end do
        else
            write(msg,'(A30,I20)') padr('Number of records: ', 30), size(self%res)
            call logger%log_message(msg, module=this_module, procedure='cg_metadata')
            write(msg,'(A30,E20.8)') padr('Residual: ', 30), self%res(size(self%res))
            call logger%log_message(msg, module=this_module, procedure='cg_metadata')
        end if
        if (self%converged) then
            call logger%log_message('Status: CONVERGED', module=this_module, procedure='cg_metadata')
        else
            call logger%log_message('Status: NOT CONVERGED', module=this_module, procedure='cg_metadata')
        end if
        if (ifreset) call self%reset()
        return
    end subroutine print_cg_${kind}$

    subroutine reset_cg_${kind}$(self)
        class(cg_${kind}$_metadata), intent(inout) :: self
        self%n_iter = 0
        self%converged = .false.
        self%info = 0
        if (allocated(self%res)) deallocate(self%res)
        return
    end subroutine reset_cg_${kind}$

    subroutine print_newton_${kind}$(self, reset_counters, verbose)
        class(newton_${kind}$_metadata), intent(inout) :: self
        logical, optional, intent(in) :: reset_counters
        !! Reset all counters to zero after printing?
        logical, optional, intent(in) :: verbose
        !! Print the residual full residual history?
        ! internals
        integer :: i
        logical :: ifreset, ifverbose
        character(len=128) :: msg

        ifreset   = optval(reset_counters, .false.)
        ifverbose = optval(verbose, .false.)

        write(msg,'(A30,I20)') padr('Iterations: ', 30), self%n_iter
        call logger%log_message(msg, module=this_module, procedure='newton_metadata')
        if (ifverbose) then
            write(msg,'(14X,A15,2X,A15)') 'Residual', 'Tolerance'
            call logger%log_message(msg, module=this_module, procedure='newton_metadata')
            write(msg,'(A14,E15.8,2X,E15.8)') '   INIT:', self%res(1), self%tol(1)
            call logger%log_message(msg, module=this_module, procedure='newton_metadata')
            do i = 2, size(self%res) - 1
               write(msg,'(A,I4,A,E15.8,2X,E15.8)') '   Step ', i-1, ': ', self%res(i), self%tol(i)
               call logger%log_message(msg, module=this_module, procedure='newton_metadata')
            end do
            i = size(self%res)
            write(msg,'(A14,E15.8,2X,E15.8)') '   FINAL:', self%res(i), self%tol(i)
            call logger%log_message(msg, module=this_module, procedure='newton_metadata')
        else
            write(msg,'(A30,E20.8)') padr('Residual: ', 30), self%res(size(self%res))
            call logger%log_message(msg, module=this_module, procedure='newton_metadata')
        end if
        if (self%converged) then
            call logger%log_message('Status: CONVERGED', module=this_module, procedure='newton_metadata')
        else
            call logger%log_message('Status: NOT CONVERGED', module=this_module, procedure='newton_metadata')
        end if
        if (ifreset) call self%reset()
        return
    end subroutine print_newton_${kind}$

    subroutine reset_newton_${kind}$(self)
        class(newton_${kind}$_metadata), intent(inout) :: self
        self%n_iter = 0
        self%eval_counter_record = 0
        self%converged = .false.
        self%info = 0
        if (allocated(self%res)) deallocate(self%res)
        if (allocated(self%tol)) deallocate(self%tol)
        return
    end subroutine reset_newton_${kind}$

    subroutine record_data_${kind}$(self, res, tol)
        class(newton_${kind}$_metadata), intent(inout) :: self
        real(${kind}$) :: res
        !! Residual of the current evaluation
        real(${kind}$) :: tol
        !! Tolerance of the current evaluation
        if (.not.allocated(self%res)) then
            allocate(self%res(1))
            self%res(1) = res
        else
            self%res = [ self%res, res ]
        end if
        if (.not.allocated(self%tol)) then
            allocate(self%tol(1))
            self%tol(1) = tol
        else
            self%tol = [ self%tol, tol ]
        end if
        self%eval_counter_record = self%eval_counter_record + 1
        return
    end subroutine record_data_${kind}$

    #:endfor

    !-------------------------------------
    !-----     VARIOUS UTILITIES     -----
    !-------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    subroutine assert_shape_vector_${type[0]}$${kind}$(v, size, vecname, module, procedure)
        !! Utility function to assert the shape of a vector.
        ${type}$, intent(in) :: v(:)
        !! Vector whose dimension need to be asserted.
        integer, intent(in) :: size(:)
        !! Expected dimensions of v.
        character(len=*), intent(in) :: vecname
        !! Name of the asserted vector.
        character(len=*), intent(in) :: module
        !! Name of the module where assertion is done.
        character(len=*), intent(in) :: procedure
        !! Name of the routine where assertion is done.

        if(any(shape(v) /= size)) then
            print *, "Vector "//vecname//" has illegal length ", shape(v), &
                           & ". Expected length is ", size, ". Aborting due to illegal vector length."
            call stop_error('Vector length assertion error', module=module, procedure=procedure)
        endif
        return
    end subroutine assert_shape_vector_${type[0]}$${kind}$

    subroutine assert_shape_matrix_${type[0]}$${kind}$(A, size, matname, module, procedure)
        !! Utility function to assert the shape of a matrix.
        ${type}$, intent(in) :: A(:, :)
        !! Matrix whose dimension need to be asserted.
        integer, intent(in) :: size(:)
        !! Expected dimensions of A.
        character(len=*), intent(in) :: matname
        !! Name of the asserted matrix.
        character(len=*), intent(in) :: module
        !! Name of the module where assertion is done.
        character(len=*), intent(in) :: procedure
        !! Name of the routine where assertion is done.

        if(any(shape(A) /= size)) then
            print *, "Matrix "//matname//" has illegal shape ", shape(A), &
                        & ". Expected shape is ", size, ". Aborting due to illegal vector length."
            call stop_error('Matrix shape assertion error', module=module, procedure=procedure)
        endif
        return
    end subroutine assert_shape_matrix_${type[0]}$${kind}$

    #:endfor

    !-------------------------------------------
    !-----     LAPACK MATRIX INVERSION     -----
    !-------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    subroutine eig_${type[0]}$${kind}$(A, vecs, vals)
        !! Eigenvalue decomposition of a dense matrix using LAPACK.
        ${type}$, intent(in) :: A(:, :)
        !! Matrix to be factorized.
        #:if type[0] == "c"
        ${type}$, intent(out) :: vecs(:, :)
        #:else
        real(${kind}$), intent(out) :: vecs(:, :)
        #:endif
        !! Eigenvectors.
        complex(${kind}$), intent(out) :: vals(:)

        ! Internal variables
        character :: jobvl = "n", jobvr = "v"
        integer :: n, lwork, info, lda, ldvl, ldvr
        #:if type[0] == "c"
        ${type}$ :: A_tilde(size(A, 1), size(A, 2)), vl(1, size(A, 1))
        ${type}$ :: work(2*size(A, 1))
        real(${kind}$) :: rwork(2*size(A, 1))
        #:else
        ${type}$ :: A_tilde(size(A, 1), size(A, 2)), vl(1, size(A, 2))
        ${type}$ :: work(4*size(A, 1)), wr(size(A, 1)), wi(size(A, 1))
        #:endif

        ! Setup variables.
        n = size(A, 1) ; lda = n ; ldvl = 1 ; ldvr = n ; a_tilde = a
        #:if type[0] == "c"
        lwork = 2*n
        #:else
        lwork = 4*n
        #:endif

        ! Eigendecomposition.
        #:if type[0] == "c"
        call geev(jobvl, jobvr, n, a_tilde, lda, vals, vl, ldvl, vecs, ldvr, work, lwork, rwork, info)
        #:else
        call geev(jobvl, jobvr, n, a_tilde, lda, wr, wi, vl, ldvl, vecs, ldvr, work, lwork, info)
        #:endif
        call check_info(info, 'GEEV', module=this_module, procedure='eig_${type[0]}$${kind}$')

        #:if type[0] == "r"
        ! Reconstruct eigenvalues
        vals = one_c${kind}$*wr + one_im_c${kind}$*wi
        #:endif

        return
    end subroutine eig_${type[0]}$${kind}$

    subroutine schur_${type[0]}$${kind}$(A, Z, eigvals)
        !! Compute the Schur form (in-place) and Schur vectors of the matrix `A`.
        ${type}$, intent(inout) :: A(:, :)
        !! Matrix to be factorized.
        ${type}$, intent(out) :: Z(:, :)
        !! Schur basis.
        complex(${kind}$), intent(out) :: eigvals(:)
        !! Eigenvalues.

        ! Internal variables.
        character :: jobvs = "v", sort = "n"
        integer :: n, lda, sdim, ldvs, lwork, info
        logical, allocatable :: bwork(:)
        ${type}$, allocatable :: work(:)
        #:if type[0] == "r"
        ${type}$, allocatable :: wr(:), wi(:)
        #:else
        real(${kind}$), allocatable :: rwork(:)
        #:endif

        ! Allocate variables.
        n = size(A, 1) ; lda = n ; ldvs = n ; lwork = #{if type[0] == "r"}# 3*n #{else}# 2*n #{endif}#
        allocate(bwork(n)) ; allocate(work(lwork)) ; #{if type[0] == "c"}# allocate(rwork(n)) #{endif}#

        #:if type[0] == "r"
        allocate(wr(size(eigvals)), wi(size(eigvals)))
        call gees(jobvs, sort, dummy_select, n, A, lda, sdim, wr, wi, Z, ldvs, work, lwork, bwork, info)
        #:else
        call gees(jobvs, sort, dummy_select, n, A, lda, sdim, eigvals, Z, ldvs, work, lwork, rwork, bwork, info)
        #:endif
        call check_info(info, 'GEES', module=this_module, procedure='schur_${type[0]}$${kind}$')

        #:if type[0] == "r"
        ! Reconstruct eigenvalues
        eigvals = cmplx(wr, wi, kind=${kind}$)
        #:endif

        return
    contains
        #:if type[0] == "r"
        pure function dummy_select(wre, wim) result(out)
            ${type}$, intent(in) :: wre
            ${type}$, intent(in) :: wim
            logical :: out
            out = .false.
            return
        end function
        #:else
        pure function dummy_select(w) result(out)
            ${type}$, intent(in) :: w
            logical :: out
            out = .false.
            return
        end function
        #:endif
    end subroutine schur_${type[0]}$${kind}$

    subroutine ordschur_${type[0]}$${kind}$(T, Q, selected)
        !! Re-order the Schur factorization from `schur` such that the selected eigenvalues
        !! are in the upper-left block.
        ${type}$, intent(inout) :: T(:, :)
        !! Schur matrix to be re-ordered.
        ${type}$, intent(inout) :: Q(:, :)
        !! Schur vectors to be re-ordered.
        logical, intent(in) :: selected(:)
        !! Boolean array defining the selected eigenvalues.

        ! Internal variables
        character :: job="n", compq="v"
        integer info, ldq, ldt, lwork, m, n
        real(${kind}$) :: s, sep
        #:if type[0] == "r"
        integer :: iwork(size(T, 1)), liwork
        ${type}$ :: wi(size(T, 1)), wr(size(T, 1)), work(size(T, 1))
        #:else
        ${type}$ :: w(size(T, 1)), work(size(T, 1))
        #:endif

        ! Setup variables.
        n = size(T, 2) ; ldt = n ; ldq = n ; lwork = max(1, n)

        #:if type[0] == "r"
        liwork = 1
        call trsen(job, compq, selected, n, T, ldt, Q, ldq, wr, wi, m, s, sep, work, lwork, iwork, liwork, info)
        #:else
        call trsen(job, compq, selected, n, T, ldt, Q, ldq, w, m, s, sep, work, lwork, info)
        #:endif
        call check_info(info, 'TRSEN', module=this_module, procedure='ordschur_${type[0]}$${kind}$')

        return
    end subroutine ordschur_${type[0]}$${kind}$

    subroutine sqrtm_${type[0]}$${kind}$(X, sqrtmX, info)
      !! Matrix-valued sqrt function for dense symmetric/hermitian positive (semi-)definite matrices
      ${type}$, intent(inout) :: X(:,:)
      !! Matrix of which to compute the sqrt
      ${type}$, intent(out)   :: sqrtmX(size(X,1),size(X,1))
      !! Return matrix
      integer, intent(out) :: info
      !! Information flag

      ! internal
      real(${kind}$) :: S(size(X,1))
      ${type}$ :: U(size(X,1), size(X,1)), VT(size(X,1), size(X,1))
      integer :: i
      real(${kind}$) :: symmetry_error
      character(len=256) :: msg

      info = 0

      #:if type[0] == "r"
      ! Check if the matrix is symmetric
      symmetry_error = 0.5_${kind}$*maxval(X - transpose(X))
      if (symmetry_error > rtol_${kind}$) then
        write(msg,'(2(A,E9.2))') "Input matrix is not symmetric. 0.5*max(X-X.T) = ", &
            & symmetry_error, ", tol = ", rtol_${kind}$
        call stop_error(msg, module=this_module, procedure='sqrtm_${type[0]}$${kind}$')
      else if (symmetry_error > 10*atol_${kind}$) then
        write(msg,'(A,E9.2)') "Input matrix is not exactly symmetric. 0.5*max(X-X.T) = ", symmetry_error
        call logger%log_warning(msg, module=this_module, procedure='sqrtm_${type[0]}$${kind}$')
      end if
      #:else
      ! Check if the matrix is hermitian
      symmetry_error = 0.5_${kind}$*maxval(abs(X - conjg(transpose(X))))
      if (symmetry_error > rtol_${kind}$) then
        write(msg,'(2(A,E9.2))') "Input matrix is not hermitian. 0.5*max(abs(X-X.H)) = ", &
            & symmetry_error, ", tol = ", rtol_${kind}$
        call stop_error(msg, module=this_module, procedure='sqrtm_${type[0]}$${kind}$')
      else if (symmetry_error > 10*atol_${kind}$) then
        write(msg,'(A,E9.2)') "Input matrix is not exactly hermitian. 0.5*max(X-X.T) = ", symmetry_error
        call logger%log_warning(msg, module=this_module, procedure='sqrtm_${type[0]}$${kind}$')
      end if
      #:endif

      ! Perform svd
      call svd(X, S, U, VT)

      ! Check if the matrix is positive definite (up to tol)
      do i = 1, size(S)
         if (S(i) .gt. 10*atol_${kind}$ ) then
            S(i) = sqrt(S(i))
         else
            S(i) = zero_r${kind}$
            info = 1
         end if
      end do

      ! Reconstruct the square root matrix
      sqrtmX = matmul(U, matmul(diag(S), VT))

      return
    end subroutine

    subroutine sqrtm_eig_${type[0]}$${kind}$(X, sqrtmX, info)
      !! Matrix-valued sqrt function for dense symmetric/hermitian positive (semi-)definite matrices
      ${type}$, intent(in)  :: X(:,:)
      !! Matrix of which to compute the sqrt
      ${type}$, intent(out) :: sqrtmX(size(X,1),size(X,1))
      !! Return matrix
      integer, intent(out) :: info
      !! Information flag

      ! internals
      ${type}$ :: Xtmp(size(X, 1), size(X, 1))
      real(${kind}$) :: lambda(size(X,1))
      ${type}$ :: V(size(X,1), size(X,1))
      integer :: i
      character(len=256) :: msg

      info = 0

      #:if type[0] == "r"
      ! Check if the matrix is symmetric
      if (.not. is_symmetric(X)) then
        write(msg,'(A)') "Input matrix is not symmetric."
        call stop_error(msg, module=this_module, procedure='sqrtm_${type[0]}$${kind}$')
      end if
      #:else
      ! Check if the matrix is hermitian
      if (.not. is_hermitian(X)) then
        write(msg,'(A)') "Input matrix is not hermitian"
        call stop_error(msg, module=this_module, procedure='sqrtm_${type[0]}$${kind}$')
      end if
      #:endif

      ! Perform eigenvalue decomposition
      Xtmp = X ; call eigh(Xtmp, lambda, vectors=V, overwrite_a=.true.)

      ! Check if the matrix is positive definite (up to tol)
      do i = 1, size(lambda)
         if (abs(lambda(i)) .gt. 10*atol_${kind}$ ) then
            if (lambda(i) .gt. zero_r${kind}$) then
               lambda(i) = sqrt(lambda(i))
            else
               lambda(i) = zero_r${kind}$
               info = -1
            end if
         else
            lambda(i) = zero_r${kind}$
            info = 1
         end if
      end do

      ! Reconstruct the square root matrix
      #:if type[0] == "r"
      sqrtmX = matmul(V, matmul(diag(lambda), transpose(V)))
      #:else
      sqrtmX = matmul(V, matmul(diag(lambda), conjg(transpose(V))))
      #:endif

      return
    end subroutine
    #:endfor

    !---------------------------------
    !-----     MISCELLANEOUS     -----
    !---------------------------------

    #:for kind, type in RC_KINDS_TYPES
    #:if type[0] == "r"
    pure real(${kind}$) function log2_${type[0]}$${kind}$(x) result(y)
        ${type}$, intent(in) :: x
        y = log(x) / log(2.0_${kind}$)
    end function
    #:endif

    pure real(${kind}$) function norml_${type[0]}$${kind}$(A) result(norm)
        ${type}$, intent(in) :: A(:, :)
        integer :: i, n
        real(${kind}$) :: row_sum

        norm = zero_r${kind}$
        n = size(A, 1)
        do i = 1, n
            row_sum = sum(abs(A(i, :)))
            norm = max(norm, row_sum)
        enddo
    end function

    #:endfor

end module lightkrylov_utils
