#:include "../include/common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
module LightKrylov
    ! --> Definitions of various constants.
    use LightKrylov_Constants
    ! --> Set of utility functions.
    use LightKrylov_Utils
    ! --> Definitions of the abstract vector types.
    use LightKrylov_AbstractVectors
    ! --> Definitions of the abstract linear operators.
    use LightKrylov_AbstractLinops
    ! --> Definitions of the abstract dynamical systems.
    use LightKrylov_AbstractSystems
    ! --> Standard Krylov techniques.
    use LightKrylov_BaseKrylov
    ! --> Iterative solvers.
    use LightKrylov_NewtonKrylov
    ! --> Newton-Krylov fixed-point iteration.
    use LightKrylov_IterativeSolvers
    ! --> Expmlib
    use LightKrylov_Expmlib
    ! --> TestTypes
    implicit none
    private

    ! LightKrylov exports.
    public :: greetings

    ! Constants exports.
    public :: sp, atol_sp, rtol_sp
    public :: dp, atol_dp, rtol_dp

    ! Utils exports.
    #:for kind in REAL_KINDS
    public :: gmres_${kind}$_opts
    public :: cg_${kind}$_opts
    public :: newton_${kind}$_opts
    #:endfor

    ! AbstractVectors exports.
    public :: abstract_vector
    #:for kind, type in RC_KINDS_TYPES
    public :: abstract_vector_${type[0]}$${kind}$
    #:endfor
    public :: innerprod
    public :: linear_combination
    public :: axpby_basis
    public :: zero_basis
    public :: copy
    public :: rand_basis
    
    ! AbstractLinops exports.
    public :: abstract_linop
    #:for kind, type in RC_KINDS_TYPES
    public :: abstract_linop_${type[0]}$${kind}$
    public :: adjoint_linop_${type[0]}$${kind}$
    public :: Id_${type[0]}$${kind}$
    public :: scaled_linop_${type[0]}$${kind}$
    public :: axpby_linop_${type[0]}$${kind}$
    #:if type[0] == "r"
    public :: abstract_sym_linop_${type[0]}$${kind}$
    #:else
    public :: abstract_hermitian_linop_${type[0]}$${kind}$
    #:endif
    #:endfor

    ! AbstractSystems exports.
    #:for kind, type in RC_KINDS_TYPES
    public :: abstract_system_${type[0]}$${kind}$
    public :: abstract_jacobian_linop_${type[0]}$${kind}$
    #:endfor
    
    ! BaseKrylov exports.
    public :: qr
    public :: apply_permutation_matrix, apply_inverse_permutation_matrix
    public :: arnoldi
    public :: initialize_krylov_subspace
    public :: orthogonalize_against_basis
    public :: orthonormalize_basis
    public :: bidiagonalization
    public :: lanczos
    public :: krylov_schur

    ! IterativeSolvers exports.
    #:for kind, type in RC_KINDS_TYPES
    public :: abstract_precond_${type[0]}$${kind}$
    #:endfor
    #:for kind, type in RC_KINDS_TYPES
    public :: abstract_linear_solver_${type[0]}$${kind}$
    #:endfor
    public :: eigs, eighs, save_eigenspectrum
    public :: svds
    public :: gmres
    #:for kind, type in RC_KINDS_TYPES
    public :: gmres_${type[0]}$${kind}$
    #:endfor
    public :: cg

    ! Newton-Krylov exports.
    public :: newton
    #:for kind in REAL_KINDS
    public :: constant_atol_${kind}$, dynamic_tol_${kind}$
    #:endfor

    ! ExpmLib exports.
    #:for kind, type in RC_KINDS_TYPES
    public :: abstract_exptA_${type[0]}$${kind}$
    #:endfor
    public :: expm
    public :: kexpm
    public :: k_exptA

contains

    subroutine greetings()
      write (*, *)
      write (*, *)
      write (*, *) "-----------------------------------------------------------------"
      write (*, *) "-----------------------------------------------------------------"
      write (*, *)

      write (*, *) "      _     _       _     _   _  __           _            "
      write (*, *) "     | |   (_) __ _| |__ | |_| |/ /_ __ _   _| | _____   __"
      write (*, *) "     | |   | |/ _` | '_ \| __| ' /| '__| | | | |/ _ \ \ / /"
      write (*, *) "     | |___| | (_| | | | | |_| . \| |  | |_| | | (_) \ V / "
      write (*, *) "     |_____|_|\__, |_| |_|\__|_|\_\_|   \__, |_|\___/ \_/  "
      write (*, *) "              |___/                     |___/              "

      write (*, *)
      write (*, *) "Developed by: Jean-Christophe Loiseau"
      write (*, *) "              J. Simon Kern"
      write (*, *) "              Arts & MÃ©tiers Institute of Technology, 2023."
      write (*, *) "              jean-christophe.loiseau@ensam.eu"
      write (*, *)

      write (*, *) "Version -- beta 0.1.0"
      write (*, *) "License -- BSD 3-Clause"
      write (*, *)

      write (*, *) "-----------------------------------------------------------------"
      write (*, *) "-----------------------------------------------------------------"
      write (*, *)
      write (*, *)
   end subroutine greetings

end module LightKrylov
