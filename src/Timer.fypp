#:include "../include/common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
module LightKrylov_Timing
   use stdlib_optval, only: optval
   use stdlib_ascii, only: to_lower
   use LightKrylov_Constants, only: dp
   use LightKrylov_Logger
   implicit none
   private
   character(len=*), parameter :: this_module      = 'LK_Timer'
   character(len=*), parameter :: this_module_long = 'LightKrylov_Timer'
   logical :: if_time = .false.

   public :: time_lightkrylov
   public :: global_lightkrylov_timer

   ! Timer type
   type, public :: lightkrylov_timer
      private
      character(len=128), public :: name = 'default_timer'
      !! Timer name
      real(dp) :: etime       = 0.0_dp
      !! Elapsed time since reset
      real(dp) :: etime_pause = 0.0_dp
      !! Elapsed time up until most recent pause
      real(dp) :: start_time  = 0.0_dp
      !! Start time for comparison
      real(dp) :: etime_max   = 0.0_dp
      !! Maximum elapsed time since reset
      real(dp) :: etime_min   = huge(1.0_dp)
      !! Minimum elapsed time since reset
      integer :: local_count  = 0
      !! Call counter since reset
      integer :: reset_count  = 0
      !! Reset counter
      integer :: count        = 0
      !! Global counter (only reset when data is flushed)
      logical :: running      = .false.
      !! Protection against repeated starts
      logical :: is_finalized = .false.
      !! Switch for printing
      real(dp), dimension(:), allocatable :: etime_data
      real(dp), dimension(:), allocatable :: etavg_data
      real(dp), dimension(:), allocatable :: etmin_data
      real(dp), dimension(:), allocatable :: etmax_data
      integer,  dimension(:), allocatable :: count_data
   contains
      private
      procedure, pass(self), public :: start => start_timer
      procedure, pass(self), public :: stop => stop_timer
      procedure, pass(self), public :: pause => pause_timer
      procedure, pass(self), public :: reset => reset_timer
      !! Reset timing data (soft/hard, clear/save data)
      procedure, pass(self), public :: finalize => finalize_timer
      !! Aggregate data and prepare summary
      procedure, pass(self), public :: get_time => get_timer_time
      !! Getter routine to access self%etime
      procedure, pass(self), public :: print_info => print_timer_info
      !! Print timing data
      procedure, pass(self), public :: save_timer_data
      !! Transfer timing data to arrays
   end type lightkrylov_timer

   ! Abstract watch type
   type, abstract, public :: abstract_watch
      !! Base type to define a global timer.
      private
      type(lightkrylov_timer), dimension(:), allocatable :: timers
      !! Array of timers contained in the watch
      integer :: timer_count    = 0
      !! Number of timers managed by watch
      integer :: private_count  = 0
      !! Number of private timers (immutable by user)
      integer :: user_count     = 0
      !! Number of user defined timers
      logical :: user_mode      = .false.
      !! Number of user defined timers
      logical :: is_initialized = .false.
   contains
      private
      procedure, pass(self), public :: add_timer
      !! Add new timer to the watch
      procedure, pass(self), public :: remove_timer
      !! Remove existing timer from the watch
      procedure, pass(self), public :: enumerate
      !! Print summary of registered timers and their current status
      procedure, pass(self), public :: get_timer_id
      !! Helper routine to return timer id from timer name
      procedure, pass(self), public :: reset_all
      !! Helper routine to reset all timers in the watch
      procedure, pass(self), public :: start => start_timer_by_name
      procedure, pass(self), public :: stop => stop_timer_by_name
      procedure, pass(self), public :: pause => pause_timer_by_name
      procedure, pass(self), public :: reset => reset_timer_by_name
      procedure, pass(self), public :: print_info => print_timer_info_by_name
      procedure(abstract_watch_init), pass(self), deferred, public :: initialize
      !! Define private timers that cannot be removed by the user, switch on timing
      procedure(abstract_watch_exit), pass(self), deferred, public :: finalize
      !! Gather timing information and print it to screen/logfile
   end type abstract_watch

   abstract interface
      subroutine abstract_watch_init(self)
         !! Interface for the initialization of the structure.
         !! NOTE: This routine must contain the following statements:
         !!   self%user_mode = .true. ! ensure that any subsequently added timers will be considered user defined.
         !!   if_time = .true.        ! switch on timing within LightKrylov.
         import abstract_watch
         class(abstract_watch), intent(inout) :: self
      end subroutine abstract_watch_init
      subroutine abstract_watch_exit(self)
         !! Interface for the finalization of the structure including the printing of the results.
         import abstract_watch
         class(abstract_watch), intent(inout) :: self
      end subroutine abstract_watch_exit
   end interface

   ! LightKrylov_watch type
   type, extends(abstract_watch), public :: lightkrylov_watch
      !! Global timing structure to contain all timers within Lightkrylov
      character(len=128) :: name = 'lightkrylov_timer'
      integer :: basekrylov_count       = 0
      integer :: iterativesolvers_count = 0
      integer :: newtonkrylov_count     = 0
   contains
      private
      procedure, pass(self), public :: initialize => initialize_lightkrylov_watch
      procedure, pass(self), public :: finalize => finalize_lightkrylov_watch
   end type lightkrylov_watch

   type(lightkrylov_watch) :: global_lightkrylov_timer
contains

   logical function time_lightkrylov() result(if_time_lightkrylov)
      if_time_lightkrylov = if_time
   end function time_lightkrylov

   !--------------------------------------------------------------
   !  Type-bound procedures for lightkrylov_timer type
   !--------------------------------------------------------------

   subroutine start_timer(self)
      !! Type-bound to lightkrylov_timer: Start timer
      class(lightkrylov_timer), intent(inout) :: self
      if (.not. self%running) then
         call cpu_time(self%start_time)
         self%running = .true.
         self%count = self%count + 1
         self%local_count = self%local_count + 1
      end if
   end subroutine start_timer

   subroutine stop_timer(self)
      !! Type-bound to lightkrylov_timer: Stop timer
      class(lightkrylov_timer), intent(inout) :: self
      ! internal
      real(dp) :: t_now, etime
      call cpu_time(t_now)
      if (self%running) then
         etime            = t_now - self%start_time
         self%etime       = self%etime + etime + self%etime_pause
         self%etime_pause = 0.0_dp
         self%etime_min   = min(self%etime_min, etime)
         self%etime_max   = max(self%etime_max, etime)
         self%running     = .false.
      end if
   end subroutine stop_timer

   subroutine pause_timer(self)
      !! Type-bound to lightkrylov_timer: Pause timer
      class(lightkrylov_timer), intent(inout) :: self
      ! internal
      real(dp) :: t_now
      call cpu_time(t_now)
      if (self%running) then
         self%etime_pause = self%etime_pause + (t_now - self%start_time)
         self%running = .false.
      end if
   end subroutine pause_timer

   subroutine save_timer_data(self)
      !! Type-bound to lightkrylov_timer: Save current timing information. 
      !! Note: This is done irrespective of the call/run status of the timer.
      class(lightkrylov_timer), intent(inout) :: self
      if (self%reset_count == 0) then
         allocate(self%etime_data(1))
         allocate(self%etmin_data(1))
         allocate(self%etmax_data(1))
         allocate(self%etavg_data(1))
         allocate(self%count_data(1))
         if (self%local_count > 0) then
            self%etime_data(1) = self%etime
            self%etmin_data(1) = self%etime_min
            self%etmax_data(1) = self%etime_max
            self%etavg_data(1) = self%etime/self%local_count
            self%count_data(1) = self%local_count
         else
            self%etime_data(1) = 0.0_dp
            self%etavg_data(1) = 0.0_dp
            self%etmin_data(1) = 0.0_dp
            self%etmax_data(1) = 0.0_dp
            self%count_data(1) = 0
         end if
         self%reset_count = 1
      else
         if (self%local_count > 0) then
            self%etime_data = [ self%etime_data, self%etime ]
            self%etmin_data = [ self%etmin_data, self%etime_min ]
            self%etmax_data = [ self%etmax_data, self%etime_max ]
            self%etavg_data = [ self%etavg_data, self%etime/self%local_count ]
            self%count_data = [ self%count_data, self%local_count ]
         else
            self%etime_data = [ self%etime_data, 0.0_dp ]
            self%etmin_data = [ self%etmin_data, 0.0_dp ]
            self%etmax_data = [ self%etmax_data, 0.0_dp ]
            self%etavg_data = [ self%etavg_data, 0.0_dp ]
            self%count_data = [ self%count_data, 0 ]
         end if
         self%reset_count = self%reset_count + 1
      end if
   end subroutine save_timer_data

   subroutine reset_timer(self, soft, clean, verbose)
      !! Type-bound to lightkrylov_timer: Reset timer
      class(lightkrylov_timer), intent(inout) :: self
      logical, optional, intent(in) :: soft
      !! Save timing data and reset only if data was collected (i.e. timer was called), default = .true.
      logical, optional, intent(in) :: clean
      !! Flush timing data as well as previously saved timing data, default = .false.
      logical, optional, intent(in) :: verbose
      !! Always print information about the reset process
      ! internal
      logical :: save_data, flush_timer, print_info
      character(len=128) :: msg
      save_data = optval(soft, .true.)
      flush_timer  = optval(clean, .false.)
      print_info   = optval(verbose, .false.)
      print *, 'reset timer: ', trim(self%name)
      if (save_data) then
         write(msg,'(A,A)') trim(self%name), ' : soft reset.'
         if (print_info) then
            call logger%log_message(msg, module=this_module)
         else
            call logger%log_debug(msg, module=this_module)
         end if
         if (self%local_count > 0) then
            call self%save_timer_data()
            self%etime       = 0.0_dp
            self%etime_pause = 0.0_dp
            self%start_time  = 0.0_dp
            self%etime_min   = huge(1.0_dp)
            self%etime_max   = 0.0_dp
            self%running     = .false.
            self%local_count = 0
         end if
      else
         ! hard reset
         write(msg,'(A,A)') trim(self%name), ' : hard reset.'
         if (print_info) then
            call logger%log_message(msg, module=this_module)
         else
            call logger%log_debug(msg, module=this_module)
         end if
         self%etime       = 0.0_dp
         self%etime_pause = 0.0_dp
         self%etime_min   = huge(1.0_dp)
         self%etime_max   = 0.0_dp
         self%start_time  = 0.0_dp
         self%running     = .false.
         self%local_count = 0
         self%reset_count = 0
         if(allocated(self%etime_data)) deallocate(self%etime_data)
         if(allocated(self%etmin_data)) deallocate(self%etmin_data)
         if(allocated(self%etmax_data)) deallocate(self%etmax_data)
         if(allocated(self%etavg_data)) deallocate(self%etavg_data)
         if(allocated(self%count_data)) deallocate(self%count_data)
      end if
      if (flush_timer) then
         write(msg,'(A,A)') trim(self%name), ' : data flushed.'
         if (print_info) then
            call logger%log_message(msg, module=this_module)
         else
            call logger%log_debug(msg, module=this_module)
         end if
         self%count = 0
         self%is_finalized = .false.
      end if
   end subroutine reset_timer

   real(dp) function get_timer_time(self) result(etime)
      !! Type-bound to lightkrylov_timer: Getter routine to return the current timer etime
      !! Note: If it is running, the timer is stopped.
      class(lightkrylov_timer), intent(inout) :: self
      if (self%running) call self%stop()
      etime = self%etime
   end function

   subroutine print_timer_info(self, full)
      !! Type-bound to lightkrylov_timer: Compute spimple statistics and print timing information to screen
      class(lightkrylov_timer), intent(inout) :: self
      logical, optional, intent(in) :: full
      !! Print saved timing data in addition to current timing data
      ! internal
      integer :: i
      logical :: if_full
      real(dp) :: etavg, etmin
      integer :: count
      character(len=128) :: msg, fmt, fmt_h, fmt_r
      if_full = optval(full, .true.)
      fmt_h = '(A32," : ",7X,A7,4(1X,A12))'
      call logger%log_message('#########        Timer info        #########', module=this_module)
      if (self%count == 0) then
         write(msg, '(*(A))') 'No timing data available for "', trim(self%name), '": Timer not called.'
         call logger%log_message(msg, module=this_module)
      else
         if (.not.self%is_finalized) then
            fmt   = '(2X,A30," : ",I7,4(1X,F12.6))'
            fmt_r = '(2X,23X,A6,I3,1X,I7,4(1X,F12.6))'
            call logger%log_message('Current data:', module=this_module)
            write(msg, fmt_h) 'name', 'calls', 'total (s)', 'avg (s)', 'min (s)', 'max (s)'
            call logger%log_message(msg, module=this_module)
            etavg = 0.0_dp
            etmin = 0.0_dp
            if (self%local_count > 0) then
               etavg = self%etime/self%local_count
               etmin = self%etime_min
            end if
            write(msg,fmt) trim(self%name), self%local_count, self%etime, etavg, etmin, self%etime_max
            call logger%log_message(msg, module=this_module)
            if (if_full) then
               if (self%reset_count > 0) then
                  write(msg,'(A,I0,A)') 'Saved data from ', self%reset_count, ' reset(s):'
                  call logger%log_message(msg, module=this_module)
                  do i = 1, self%reset_count
                     write(msg,fmt_r) 'reset', i, self%count_data(i), self%etime_data(i), self%etavg_data(i), &
                                       & self%etmin_data(i), self%etmax_data(i)
                     call logger%log_message(msg, module=this_module)
                  end do
               else
                  call logger%log_message('No saved timing data.', module=this_module)
               end if
            end if
         else ! is_finalized
            call print_summary_header('Timer summary')
            if (self%reset_count == 0) then
               call stop_error(trim(self%name)//': reset_count inconsistent!', module=this_module, procedure='finalize_timer')
            end if
            call print_summary(self)
         end if
      end if
   end subroutine print_timer_info

   subroutine finalize_timer(self, if_silent)
      !! Type-bound to lightkrylov_timer: Prepare timer summary
      class(lightkrylov_timer), intent(inout) :: self
      logical, optional, intent(in) :: if_silent
      !! No output
      ! internal
      integer :: i, count
      logical :: silent
      real(dp) :: etime, etavg
      character(len=128) :: msg, fmt, fmt_r
      silent = optval(if_silent, .false.)
      fmt       = '(2X,A30," : ",A6,1X,I7,2(1X,F12.6))'
      fmt_r = '(2X,33X,A6,I3,1X,I7,2(1X,F12.6))'
      call self%stop()
      call self%save_timer_data()
      self%is_finalized = .true.
      if (.not. silent) then
         write(msg,'(*(A))') trim(self%name), ' finalization complete.'
         call logger%log_message(msg, module=this_module)
         call self%print_info(full=.true.)
      end if
   end subroutine finalize_timer

   !--------------------------------------------------------------
   !  Type-bound procedures for abstract_watch type
   !--------------------------------------------------------------

   integer function get_timer_id(self, name) result(id)
      !! Type-bound to abstract_watch: Getter routine to return the timer id based on name
      class(abstract_watch) :: self
      character(len=*)  :: name
      !! Timer name
      ! internal
      integer :: i
      id = 0
      do i = 1, self%timer_count
         if (self%timers(i)%name == to_lower(name)) id = i
      end do
   end function get_timer_id

   subroutine add_timer(self, name)
      !! Type-bound to abstract_watch: Add timer to watch
      !! Note: The new timer name must be unique
      class(abstract_watch), intent(inout) :: self
      character(len=*), intent(in) :: name
      if (self%timer_count == 0) then
         allocate(self%timers(1))
         self%timers(1) = lightkrylov_timer(to_lower(name))
         self%timer_count = 1
      else
         if (self%get_timer_id(name) > 0) then
            call stop_error('Timer "'//to_lower(trim(name))//'" already defined!', & 
                              & module=this_module, procedure='add_timer')
         end if
         self%timers = [ self%timers, lightkrylov_timer(name) ]
         self%timer_count = self%timer_count + 1
         if (self%user_mode) self%user_count = self%user_count + 1
      end if
      call logger%log_debug('Timer "'//to_lower(trim(name))//'" added.', module=this_module)
   end subroutine add_timer

   subroutine remove_timer(self, name)
      !! Type-bound to abstract_watch: Remove timer from watch
      !! Note: Timers considered private (defined during initialisation) cannot be removed.
      class(abstract_watch), intent(inout) :: self
      character(len=*), intent(in) :: name
      ! internal
      type(lightkrylov_timer), dimension(:), allocatable :: new_timers
      integer :: id
      id = self%get_timer_id(name)
      if (id == 0) then
         call stop_error('Timer "'//to_lower(trim(name))//'" not defined!', & 
                              & module=this_module, procedure='remove_timer')
      else
         if (id <= self%private_count) then
            call logger%log_message('Cannot remove private timer "'//to_lower(trim(name))//'".', & 
                              & module=this_module, procedure='remove_timer')
         else
            self%timer_count = self%timer_count - 1
            allocate(new_timers(self%timer_count))
            new_timers(1:id-1) = self%timers(1:id-1)
            new_timers(id:)    = self%timers(id+1:)
            deallocate(self%timers)
            self%timers = new_timers
         end if
      end if
      call logger%log_debug('Timer "'//to_lower(trim(name))//'" removed.', module=this_module)
   end subroutine remove_timer
   
   subroutine start_timer_by_name(self, name)
      !! Type-bound to abstract_watch: Start timer referenced by name
      !! Note: Wrapper of the corresponding routine from lightkrylov_timer
      class(abstract_watch), intent(inout) :: self
      character(len=*), intent(in) :: name
      ! internal
      integer :: id
      id = self%get_timer_id(name)
      if (id == 0) then 
         call stop_error('Timer "'//to_lower(trim(name))//'" not found!', & 
                              & module=this_module, procedure='start_timer_by_name')
      else
         call self%timers(id)%start()
      end if
      call logger%log_debug('Timer "'//to_lower(trim(name))//'" started.', module=this_module)
   end subroutine start_timer_by_name

   subroutine stop_timer_by_name(self, name)
      !! Type-bound to abstract_watch: Stop timer referenced by name
      !! Note: Wrapper of the corresponding routine from lightkrylov_timer
      class(abstract_watch), intent(inout) :: self
      character(len=*), intent(in) :: name
      ! internal
      integer :: id
      id = self%get_timer_id(name)
      if (id == 0) then 
         call stop_error('Timer "'//to_lower(trim(name))//'" not found!', & 
                              & module=this_module, procedure='stop_timer_by_name')
      else
         call self%timers(id)%stop()
      end if
      call logger%log_debug('Timer "'//to_lower(trim(name))//'" stopped.', module=this_module)
   end subroutine stop_timer_by_name

   subroutine pause_timer_by_name(self, name)
      !! Type-bound to abstract_watch: Pause timer referenced by name
      !! Note: Wrapper of the corresponding routine from lightkrylov_timer
      class(abstract_watch), intent(inout) :: self
      character(len=*), intent(in) :: name
      ! internal
      integer :: id
      id = self%get_timer_id(name)
      if (id == 0) then 
         call stop_error('Timer "'//to_lower(trim(name))//'" not found!', & 
                              & module=this_module, procedure='pause_timer_by_name')
      else
         call self%timers(id)%pause()
      end if
      call logger%log_debug('Timer "'//to_lower(trim(name))//'" paused.', module=this_module)
   end subroutine

   subroutine reset_timer_by_name(self, name, soft, clean)
      !! Type-bound to abstract_watch: Reset timer referenced by name
      !! Note: Wrapper of the corresponding routine from lightkrylov_timer
      class(abstract_watch), intent(inout) :: self
      character(len=*), intent(in) :: name
      logical, optional, intent(in) :: soft
      logical, optional, intent(in) :: clean
      ! internal
      integer :: id
      id = self%get_timer_id(name)
      if (id == 0) then 
         call stop_error('Timer "'//to_lower(trim(name))//'" not found!', & 
                              & module=this_module, procedure='reset_timer_by_name')
      else
         call self%timers(id)%reset(soft, clean)
      end if
   end subroutine

   subroutine print_timer_info_by_name(self, name, full)
      !! Type-bound to abstract_watch: Print timing information for timer referenced by name
      !! Note: Wrapper of the corresponding routine from lightkrylov_timer
      class(abstract_watch), intent(inout) :: self
      character(len=*), intent(in) :: name
      logical, optional, intent(in) :: full
      ! internal
      integer :: id
      id = self%get_timer_id(name)
      if (id == 0) then 
         call stop_error('Timer "'//to_lower(trim(name))//'" not found!', & 
                              & module=this_module, procedure='print_timer_info_by_name')
      else
         call self%timers(id)%print_info(full)
      end if
   end subroutine

   subroutine enumerate(self, only_user)
      !! Type-bound to abstract_watch: Summarize registered timers and their status
      class(abstract_watch), intent(in) :: self
      logical, optional, intent(in) :: only_user
      !! Summarize only user defined timers? default: .true.
      ! internal
      integer :: i
      logical :: only_user_
      character(len=128) :: msg, fmt
      fmt = '(4X,I4," :",3(1X,I0))'
      only_user_ = optval(only_user, .true.)
      if (.not. only_user_) then
         call logger%log_message('Registered timers: all', module=this_module)
         do i = 1, self%private_count
            associate (t => self%timers(i))
               write(msg,fmt) i, trim(t%name), t%count, t%local_count, t%reset_count
               call logger%log_message(msg, module=this_module)
            end associate
         end do
      end if
      if (self%user_count > 0) then
         call logger%log_message('Registered timers: user', module=this_module)
         do i = self%private_count+1, self%timer_count
            associate (t => self%timers(i))
               write(msg,fmt) i, trim(t%name), t%count, t%local_count, t%reset_count
               call logger%log_message(msg, module=this_module)
            end associate
         end do
      end if
   end subroutine enumerate

   subroutine reset_all(self, soft, clean)
      !! Type-bound to abstract_watch: Utility function to reset all timers at once
      !! Note: Wrapper of the corresponding routine from lightkrylov_timer
      class(abstract_watch), intent(inout) :: self
      logical, optional, intent(in) :: soft
      logical, optional, intent(in) :: clean
      ! internal
      integer :: i
      logical :: soft_
      logical :: clean_
      character(len=128) :: msg
      soft_  = optval(soft, .true.)
      clean_ = optval(clean, .false.)
      do i = 1, self%timer_count
         call self%timers(i)%reset(soft, clean)
      end do
      write(msg,'(A,2(A,I0))') 'All timers reset: ', 'system: ', self%private_count, ', user: ', self%user_count
      call logger%log_message(msg, module=this_module)
      write(msg,'(2X,A,L)') 'soft reset:   ', soft_
      call logger%log_message(msg, module=this_module)
      write(msg,'(2X,A,L)') 'flush timers: ', clean_
      call logger%log_message(msg, module=this_module)      
   end subroutine reset_all

   !--------------------------------------------------------------
   !  Concrete implementations for the lightkrylov_watch type
   !--------------------------------------------------------------

   subroutine initialize_lightkrylov_watch(self)
      !! Initialize global watch within LightKrylov and define private system timers.
      class(lightkrylov_watch), intent(inout) :: self
      ! internal
      character(len=128) :: msg
      if (.not. self%is_initialized) then
         ! timers for LightKrylov_BaseKrylov
         #:for kind, type in RC_KINDS_TYPES
         ! ${type[0]}$${kind}$
         call self%add_timer('qr_with_pivoting_${type[0]}$${kind}$')
         call self%add_timer('qr_no_pivoting_${type[0]}$${kind}$')
         call self%add_timer('orthonormalize_basis_${type[0]}$${kind}$')
         call self%add_timer('orthonormalize_vector_against_basis_${type[0]}$${kind}$')
         call self%add_timer('orthonormalize_basis_against_basis_${type[0]}$${kind}$')
         call self%add_timer('dgs_vector_against_basis_${type[0]}$${kind}$')
         call self%add_timer('dgs_basis_against_basis_${type[0]}$${kind}$')
         call self%add_timer('arnoldi_${type[0]}$${kind}$')
         call self%add_timer('lanczos_bidiagonalization_${type[0]}$${kind}$')
         call self%add_timer('lanczos_tridiagonalization_${type[0]}$${kind}$')
         self%basekrylov_count = self%timer_count
         #:endfor
         ! timers for LightKrylov_IterativeSolvers
         #:for kind, type in RC_KINDS_TYPES
         ! ${type[0]}$${kind}$
         call self%add_timer('eigs_${type[0]}$${kind}$')
         call self%add_timer('eighs_${type[0]}$${kind}$')
         call self%add_timer('svds_${type[0]}$${kind}$')
         call self%add_timer('gmres_${type[0]}$${kind}$')
         call self%add_timer('fgmres_${type[0]}$${kind}$')
         call self%add_timer('cg_${type[0]}$${kind}$')
         self%iterativesolvers_count = self%timer_count
         #:endfor
         ! timers for LightKrylov_NewtonKrylov
         #:for kind, type in RC_KINDS_TYPES
         ! ${type[0]}$${kind}$
         call self%add_timer('newton_${type[0]}$${kind}$')
         #:endfor
         self%newtonkrylov_count = self%timer_count
         self%private_count = self%timer_count
         write(msg,'(3X,I4,A)') self%private_count, ' system timers registered.'
         call logger%log_information(msg, module=this_module, procedure='timer initialization')
         self%is_initialized = .true.
      else
         ! If the system timers have already been defined, we want to flush the data
         call self%reset_all(soft = .false.)
         write(msg,'(3X,I4,A)') self%private_count, ' system timers registered and fully reset.'
         call logger%log_information(msg, module=this_module, procedure='timer initialization')
         if (self%user_count > 0) then
            write(msg,'(3X,I4,A)') self%user_count, ' user defined timers registered and fully reset.'
            call logger%log_information(msg, module=this_module, procedure='timer initialization')
         end if
      end if
      self%user_mode = .true.
      if_time = .true.
      call logger%log_message('LightKrylov system timer initialization complete.', module=this_module)
   end subroutine initialize_lightkrylov_watch

   subroutine finalize_lightkrylov_watch(self)
      !! Finalize global watch within LightKrylov and print used timers.
      class(lightkrylov_watch), intent(inout) :: self
      ! internal
      integer :: i, icalled
      integer :: ic_bk, ic_is, ic_nk, ic_user
      character(len=128) :: msg
      icalled = 0
      do i = 1, self%timer_count
         call self%timers(i)%finalize(if_silent=.true.)
         if (self%timers(i)%count > 0)         icalled = icalled + 1
         if (i == self%basekrylov_count)       ic_bk   = icalled
         if (i == self%iterativesolvers_count) ic_is   = icalled - ic_bk
         if (i == self%newtonkrylov_count)     ic_nk   = icalled - ic_is - ic_bk
      end do
      ic_user = icalled - ic_nk - ic_is - ic_bk
      if_time = .false.
      call logger%log_message('LightKrylov timer finalization complete.', module=this_module)
      call logger%log_message('#########   Global timer summary   #########', module=this_module)
      call logger%log_message('______________________', module=this_module)
      call logger%log_message('Overview:', module=this_module)
      write(msg, '(2X,A40,I5)') 'Total active timers:', self%timer_count
      call logger%log_message(msg, module=this_module)
      write(msg, '(2X,A40,I5)') 'User defined:', self%user_count
      call logger%log_message(msg, module=this_module)
      write(msg, '(2X,A40,I5)') 'Called timers:', icalled
      call logger%log_message(msg, module=this_module)
      call logger%log_message('______________________', module=this_module)
      if (ic_bk > 0) then
         call  print_summary_header('BaseKrylov')
         do i = 1, self%basekrylov_count
            call print_summary(self%timers(i))
         end do
      end if
      if (ic_is > 0) then
         call print_summary_header('IterativeSolvers')
         do i = self%basekrylov_count + 1, self%iterativesolvers_count
            call print_summary(self%timers(i))
         end do
      end if
      if (ic_nk > 0) then
         call  print_summary_header('NewtonKrylov')
         do i = self%iterativesolvers_count + 1, self%newtonkrylov_count
            call print_summary(self%timers(i))
         end do
      end if
      if (self%user_count > 0 .and. ic_user > 0) then
         call print_summary_header('User-defined')
         do i = self%private_count + 1, self%timer_count
            call print_summary(self%timers(i))
         end do
      end if
      call logger%log_message('#########   Global timer summary   #########', module=this_module)
   end subroutine finalize_lightkrylov_watch

   !--------------------------------------------------------------
   !  Helper subroutines for pretty output
   !--------------------------------------------------------------

   subroutine print_summary_header(section_name)
      !! Print section headers for the private and user defined timers
      character(len=*), intent(in) :: section_name
      ! internal
      character(len=128) :: msg
      call logger%log_message(trim(section_name)//':', module=this_module)
      write(msg, '(A32," : ",9X,A7,4(1X,A12))') 'name', 'calls', 'total (s)', 'avg (s)', 'min (s)', 'max (s)'
      call logger%log_message(msg, module=this_module)
      call logger%log_message('____________________________________________', module=this_module)
   end subroutine print_summary_header

   subroutine print_summary(t)
      !! Print the full timer summary
      class(lightkrylov_timer), intent(in) :: t
      ! internal
      integer  :: i, count, count2
      real(dp) :: etime, etavg, etmin, etmax
      character(len=128) :: msg, fmt, fmt_r
      fmt   = '(2X,A30," : ",A6,3X,I7,4(1X,F12.6))'
      fmt_r = '(2X,33X,A6,I3,I7,4(1X,F12.6))'
      count  = sum(t%count_data)
      count2 = 0
      etmin  = huge(0.0_dp)
      etmax  = 0.0_dp
      do i = 1, t%reset_count
         if (t%count_data(i) > 0) then
            count2 = count2 + 1
            etmin = min(etmin, t%etmin_data(i))
            etmax = max(etmax, t%etmax_data(i))
         end if
      end do
      if (count > 0) then
         etime = sum(t%etime_data)
         etavg = sum(t%etavg_data)/count2
         write(msg,fmt) trim(t%name), 'total', count, etime, etavg, etmin, etmax
         call logger%log_message(msg, module=this_module)
         if (t%reset_count > 1) then
            do i = 1, t%reset_count
               etime = t%etime_data(i)
               etmin = t%etmin_data(i)
               etmax = t%etmax_data(i)
               etavg = t%etavg_data(i)
               count = t%count_data(i)
               if (count > 0) then
                  write(msg,fmt_r) 'reset', i, count, etime, etavg, etmin, etmax
               else
                  write(msg,'(2X,33X,A6,I3,I7,A52)') 'reset', i, count, 'not called'
               end if
               call logger%log_message(msg, module=this_module)
            end do
         end if
      end if
   end subroutine print_summary

end module LightKrylov_Timing