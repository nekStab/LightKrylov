#:include "../../../include/common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
submodule (lightkrylov_iterativesolvers) cg_solver
    use stdlib_strings, only: padr
    implicit none
contains

    !----------------------------------------
    !-----     Options and Metadata     -----
    !----------------------------------------

    #:for kind in REAL_KINDS
    module procedure print_cg_${kind}$
        integer :: i
        logical :: ifreset, ifverbose
        character(len=128) :: msg

        ifreset   = optval(reset_counters, .false.)
        ifverbose = optval(verbose, .false.)

        write(msg,'(A30,I20)') padr('Iterations: ', 30), self%n_iter
        call logger%log_message(msg, module=this_module, procedure='cg_metadata')
        if (ifverbose) then
            write(msg,'(14X,A15)') 'Residual'
            call logger%log_message(msg, module=this_module, procedure='cg_metadata')
            call logger%log_message('Residual history:', module=this_module, procedure='cg_metadata')
            write(msg,'(A14,E15.8)') '   INIT:', self%res(1)
            call logger%log_message(msg, module=this_module, procedure='cg_metadata')
            do i = 2, self%n_iter+1
               write(msg,'(A,I4,A,E15.8)') '   Step ', i-1, ': ', self%res(i)
               call logger%log_message(msg, module=this_module, procedure='cg_metadata')
            end do
        else
            write(msg,'(A30,I20)') padr('Number of records: ', 30), size(self%res)
            call logger%log_message(msg, module=this_module, procedure='cg_metadata')
            write(msg,'(A30,E20.8)') padr('Residual: ', 30), self%res(size(self%res))
            call logger%log_message(msg, module=this_module, procedure='cg_metadata')
        end if
        if (self%converged) then
            call logger%log_message('Status: CONVERGED', module=this_module, procedure='cg_metadata')
        else
            call logger%log_message('Status: NOT CONVERGED', module=this_module, procedure='cg_metadata')
        end if
        if (ifreset) call self%reset()
        return
    end procedure 

    module procedure reset_cg_${kind}$
        self%n_iter = 0
        self%converged = .false.
        self%info = 0
        if (allocated(self%res)) deallocate(self%res)
    end procedure
    #:endfor

    !-------------------------------------------------
    !-----     CG SOLVERS FOR ABSTRACT TYPES     -----
    !-------------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    module procedure cg_${type[0]}$${kind}$
        ! Options.
        integer :: maxiter
        real(${kind}$) :: tol, rtol_, atol_
        type(cg_${kind}$_opts)     :: opts
        type(cg_${kind}$_metadata) :: cg_meta

        ! Working variables.
        class(abstract_vector_${type[0]}$${kind}$), allocatable :: r, p, Ap
        ${type}$ :: alpha, beta, r_dot_r_old, r_dot_r_new
        real(${kind}$) :: residual

        ! Miscellaneous.
        integer :: i
        character(len=256) :: msg

        call logger%log_debug('start', module=this_module, procedure='cg_${type[0]}$${kind}$')
        if (time_lightkrylov()) call timer%start('cg_${type[0]}$${kind}$')
        ! Deals with the optional args.
        rtol_ = optval(rtol, rtol_${kind}$)
        atol_ = optval(atol, atol_${kind}$)
        if (present(options)) then
            opts = options
        else
            opts = cg_${kind}$_opts()
        endif
        tol = atol_ + rtol_ * b%norm() ; maxiter = opts%maxiter

        ! Initialize vectors.
        allocate(r, mold=b)  ; call r%zero()
        allocate(p, mold=b)  ; call p%zero()
        allocate(Ap, mold=b) ; call Ap%zero()

         ! Initialize meta & reset matvec counter
        cg_meta = cg_${kind}$_metadata()
        call A%reset_counter(.false., 'cg%init')

        info = 0

        ! Compute initial residual r = b - Ax.
        if (x%norm() > 0) call A%apply_matvec(x, r)
        call r%sub(b) ; call r%chsgn()

        ! Initialize direction vector.
        p = r

        ! Initialize dot product of residual r_dot_r_old = r' * r
        r_dot_r_old = r%dot(r)
        allocate(cg_meta%res(1)); cg_meta%res(1) = sqrt(abs(r_dot_r_old))

        ! Conjugate gradient iteration.
        cg_loop: do i = 1, maxiter
            ! Compute A @ p
            call A%apply_matvec(p, Ap)
            ! Compute step size.
            alpha = r_dot_r_old / p%dot(Ap)
            ! Update solution x = x + alpha*p
            call x%axpby(one_${type[0]}$${kind}$, p, alpha)
            ! Update residual r = r - alpha*Ap
            call r%axpby(one_${type[0]}$${kind}$, Ap, -alpha)
            ! Compute new dot product of residual r_dot_r_new = r' * r.
            r_dot_r_new = r%dot(r)
            ! Check for convergence.
            #:if type[0] == "c"
            residual = sqrt(abs(r_dot_r_new))
            #:else
            residual = sqrt(r_dot_r_new)
            #:endif

            ! Save metadata.
            cg_meta%n_iter = cg_meta%n_iter + 1
            cg_meta%res = [ cg_meta%res, residual ]

            if (residual < tol) then
               cg_meta%converged = .true.
               exit cg_loop
            end if

            ! Compute new direction beta = r_dot_r_new / r_dot_r_old.
            beta = r_dot_r_new / r_dot_r_old
            ! Update direction p = beta*p + r
            call p%axpby(beta, r, one_${type[0]}$${kind}$)
            ! Update r_dot_r_old for next iteration.
            r_dot_r_old = r_dot_r_new

            write(msg,'(A,I3,2(A,E9.2))') 'CG step ', i, ': res= ', residual, ', tol= ', tol
            call logger%log_information(msg, module=this_module, procedure='cg_${type[0]}$${kind}$')
        enddo cg_loop

        ! Set and copy info flag for completeness
        info = cg_meta%n_iter
        cg_meta%info = info

        if (opts%if_print_metadata) call cg_meta%print()

        ! Set metadata output
        if (present(meta)) then
           select type(meta)
               type is (cg_${kind}$_metadata)
                   meta = cg_meta
           end select
        end if

        call A%reset_counter(.false., 'cg%post')
        if (time_lightkrylov()) call timer%stop('cg_${type[0]}$${kind}$')
        call logger%log_debug('end', module=this_module, procedure='cg_${type[0]}$${kind}$')

        return
    end procedure
    #:endfor

end submodule

