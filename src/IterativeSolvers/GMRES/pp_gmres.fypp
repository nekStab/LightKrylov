#:include "../../../include/common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
submodule (lightkrylov_iterativesolvers) pp_gmres_solver
    use stdlib_strings, only: padr
    use stdlib_linalg, only: lstsq, norm
    implicit none
contains
    !----------------------------------------
    !-----     Options and Metadata     -----
    !----------------------------------------

    #:for kind in REAL_KINDS
    module procedure print_pp_gmres_${kind}$
        ! internals
        character(len=*), parameter :: this_procedure = 'print_pp_gmres_${kind}$'
        integer :: i
        logical :: ifreset, ifverbose
        character(len=128) :: msg

        ifreset   = optval(reset_counters, .false.)
        ifverbose = optval(verbose, .false.)
  
        write(msg,'(A30,I6,"  (",I6,"/",I3,")")') padr('Iterations   (inner/outer): ', 30), &
                  & self%n_iter, self%n_inner, self%n_outer
        call log_message(msg, this_module, this_procedure)
        if (ifverbose) then
            write(msg,'(14X,A15)') 'Residual'
            call log_message(msg, this_module, this_procedure)
            write(msg,'(A14,E15.8)') '   INIT:', self%res(1)
            call log_message(msg, this_module, this_procedure)
            do i = 1, self%n_iter
               write(msg,'(A,I3,A,E20.8)') '   Step ', i, ': ', self%res(i)
               call log_message(msg, this_module, this_procedure)
            end do
        else
            write(msg,'(A30,I20)') padr('Number of records: ', 30), size(self%res)
            call log_message(msg, this_module, this_procedure)
            write(msg,'(A30,E20.8)') padr('Residual: ', 30), self%res(size(self%res))
            call log_message(msg, this_module, this_procedure)
        end if
        if (self%converged) then
            call log_message('Status: CONVERGED', this_module, this_procedure)
        else
            call log_message('Status: NOT CONVERGED', this_module, this_procedure)
        end if
        if (ifreset) call self%reset()
        return
    end procedure

    module procedure reset_pp_gmres_${kind}$
        self%n_iter = 0
        self%n_inner = 0
        self%n_outer = 0
        self%converged = .false.
        self%info = 0
        if (allocated(self%res)) deallocate(self%res)
        return
    end procedure
    #:endfor

    !------------------------------------------------------------------------------
    !-----     POLYNOMIAL PRECONDITIONED GMRES SOLVERS FOR ABSTRACT TYPES     -----
    !------------------------------------------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    module procedure pp_gmres_${type[0]}$${kind}$
       ! Options.
        integer :: kdim, maxiter
        real(${kind}$) :: tol, rtol_, atol_
        logical :: trans
        type(pp_gmres_${kind}$_opts)     :: opts
        type(pp_gmres_${kind}$_metadata) :: gmres_meta

        ! Krylov subspace
        class(abstract_vector_${type[0]}$${kind}$), allocatable :: V(:)
        ! Hessenberg matrix.
        ${type}$, allocatable :: H(:, :)
        ! Least-squares variables.
        ${type}$, allocatable :: y(:), e(:)
        real(${kind}$) :: beta
        ! Givens rotations.
        ${type}$, allocatable :: c(:), s(:)

        ! Preconditioner
        logical :: has_precond
        class(abstract_precond_${type[0]}$${kind}$), allocatable :: precond

        ! Miscellaneous.
        character(len=*), parameter :: this_procedure = 'pp_gmres_${type[0]}$${kind}$'
        integer :: i, k, iter
        class(abstract_vector_${type[0]}$${kind}$), allocatable :: dx, wrk
        character(len=256) :: msg

        if (time_lightkrylov()) call timer%start(this_procedure)
        ! Deals with the optional args.
        rtol_ = optval(rtol, rtol_${kind}$)
        atol_ = optval(atol, atol_${kind}$)
        if (present(options)) then
            select type (options)
            type is (pp_gmres_${kind}$_opts)
                opts = options
            class default
                call stop_error("The optional intent [IN] argument 'options' must be of type 'pp_gmres_${kind}$_opts'", &
                              & this_module, this_procedure)
            end select
        else
            opts = pp_gmres_${kind}$_opts()
        endif

        kdim = opts%kdim ; maxiter = opts%maxiter
        tol = atol_ + rtol_ * b%norm()
        trans = optval(transpose, .false.)

        ! Deals with the preconditioner.
        has_precond = optval(present(preconditioner), .false.)
        if (has_precond) allocate(precond, source=preconditioner)

        ! Initialize working variables.
        allocate(wrk, mold=b) ; call wrk%zero()
        allocate(V(kdim+1), mold=b) ; call zero_basis(V)
        allocate(H(kdim+1, kdim)) ; H = 0.0_${kind}$
        allocate(e(kdim+1)) ; e = 0.0_${kind}$
        allocate(c(kdim)) ; c = 0.0_${kind}$
        allocate(s(kdim)) ; s = 0.0_${kind}$

        ! Initialize metadata and & reset matvec counter
        gmres_meta = pp_gmres_${kind}$_metadata() ; gmres_meta%converged = .false.
        call A%reset_counter(trans, 'pp_gmres%init')

        info = 0 ; iter = 0

        do while ((.not. gmres_meta%converged) .and. (iter <= maxiter))
            !> Initialize data
            H = 0.0_${kind}$ ; call zero_basis(V)
            if (trans) then
                call A%apply_rmatvec(x, V(1))
            else
                call A%apply_matvec(x, V(1))
            endif
            call V(1)%sub(b) ; call V(1)%chsgn()
            e = 0.0_${kind}$ ; beta = V(1)%norm() ; e(1) = beta
            call V(1)%scal(one_${type[0]}$${kind}$/beta)
            c = 0.0_${kind}$ ; s = 0.0_${kind}$
            allocate(gmres_meta%res(1)); gmres_meta%res(1) = abs(beta)
            write(msg,'(2(A,E11.4))') 'GMRES(k)   init step     : |res|= ', &
                        & abs(beta), ', tol= ', tol
            call log_information(msg, this_module, this_procedure)

            gmres_iter: do k = 1, kdim
                !> Current number of iterations.
                iter = iter + 1
                !> Preconditioner.
                wrk = V(k) ; if (has_precond) call precond%apply(wrk, k, beta, tol)
                !-----------------------------------------
                !-----     Arnoldi factorization     -----
                !-----------------------------------------
                !> Matrix vector product.
                if (trans) then
                    call A%apply_rmatvec(wrk, V(k+1))
                else
                    call A%apply_matvec(wrk, V(k+1))
                endif
                !> Orthogonalization + Hessenberg update.
                call double_gram_schmidt_step(V(k+1), V(:k), info, if_chk_orthonormal=.false., beta=H(:k, k))
                call check_info(info, 'double_gram_schmidt_step', this_module, this_procedure)
                !> Update Hessenberg matrix and normalize residual Krylov vector.
                H(k+1, k) = V(k+1)%norm()
                if (abs(H(k+1, k)) > tol) call V(k+1)%scal(one_${type[0]}$${kind}$ / H(k+1, k))
                !-----------------------------------------
                !-----     Least-Squares Problem     -----
                !-----------------------------------------
                !> Apply Givens rotations to the Hessenberg matrix.
                call apply_givens_rotation(H(:k+1, k), c(:k), s(:k))
                !> Update the right-hand side vector accordingly.
                e(k+1) = -s(k)*e(k) ; e(k) = c(k)*e(k)
                !> Least-squares residual.
                beta = abs(e(k+1))
 
                ! Save metadata.
                gmres_meta%n_iter  = gmres_meta%n_iter + 1
                gmres_meta%n_inner = gmres_meta%n_inner + 1
                gmres_meta%res = [ gmres_meta%res, abs(beta) ]

                ! Check convergence.
                write(msg,'(A,I3,2(A,E11.4))') 'GMRES(k)   inner step ', k, ': |res|= ', &
                            & abs(beta), ', tol= ', tol
                call log_information(msg, this_module, this_procedure)

                if (abs(beta) < tol) gmres_meta%converged = .true.
                if (gmres_meta%converged) exit gmres_iter
            enddo gmres_iter

            ! Update solution.
            k = min(k, kdim) ; y = solve_triangular(H(:k, :k), e(:k))
            call linear_combination(dx, V(:k), y)
            if (has_precond) call precond%apply(dx) ; call x%add(dx)

            ! Recompute residual for sanity check.
            if (trans) then
                call A%apply_rmatvec(x, v(1))
            else
                call A%apply_matvec(x, v(1))
            endif
            call v(1)%sub(b) ; call v(1)%chsgn()

            ! Initialize new starting Krylov vector if needed.
            beta = v(1)%norm() ; if (abs(beta) > 0.0_${kind}$) call v(1)%scal(one_${type[0]}$${kind}$ / beta)

            ! Save metadata.
            gmres_meta%n_iter  = gmres_meta%n_iter + 1
            gmres_meta%n_outer = gmres_meta%n_outer + 1
            gmres_meta%res = [ gmres_meta%res, abs(beta) ]

            write(msg,'(A,I3,2(A,E11.4))') 'GMRES(k) outer step   ', gmres_meta%n_outer, ': |res|= ', &
                            & abs(beta), ', tol= ', tol
            call log_information(msg, this_module, this_procedure)

            ! Exit gmres if desired accuracy is reached.
            if (abs(beta) < tol) then
               gmres_meta%converged = .true.
               exit 
            end if
        enddo

        ! Returns the number of iterations.
        info = gmres_meta%n_iter
        gmres_meta%info = info

        if (opts%if_print_metadata) call gmres_meta%print()

        ! Set metadata output
        if (present(meta)) then
            select type(meta)
            type is (pp_gmres_${kind}$_metadata)
                meta = gmres_meta
            class default
                call stop_error("The optional intent [OUT] argument 'meta' must be of type 'pp_gmres_${kind}$_metadata'", &
                              & this_module, this_procedure)
            end select
        end if

        call A%reset_counter(trans, 'pp_gmres%post')
        if (time_lightkrylov()) call timer%stop(this_procedure)
        
        return
    end procedure 
    #:endfor

end submodule

