#:include "../../include/common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
submodule (lightkrylov_basekrylov) lanczos_methods
    implicit none
contains
    #:for kind, type in RC_KINDS_TYPES
    module procedure lanczos_tridiagonalization_${type[0]}$${kind}$
        character(len=*), parameter :: this_procedure = 'lanczos_tridiagonalization_${type[0]}$${kind}$'
        integer :: k_start, k_end
        real(${kind}$) :: tolerance
        real(${kind}$) :: beta
        integer :: k, kdim

        if (time_lightkrylov()) call timer%start(this_procedure)

        ! Deal with optional args.
        kdim = size(X) - 1
        k_start = optval(kstart, 1)
        k_end = optval(kend, kdim)
        tolerance = optval(tol, atol_${kind}$)
        info = 0

        ! Lanczos tridiagonalization.
        lanczos: do k = k_start, k_end
            ! Matrix-vector product.
            call A%apply_matvec(X(k), X(k+1))
            ! Update tridiagonal matrix.
            call update_tridiag_matrix_${type[0]}$${kind}$(T, X, k)
            beta = X(k+1)%norm() ; T(k+1, k) = beta

            ! Exit Lanczos loop if needed.
            if (beta < tolerance) then
                ! Dimension of the computed invariant subspace.
                info = k
                ! Exit the Lanczos iteration.
                exit lanczos
            else
                ! Normalize the new Krylov vector.
                call X(k+1)%scal(one_${type[0]}$${kind}$ / beta)
            endif
        enddo lanczos

        if (time_lightkrylov()) call timer%stop(this_procedure)
        
        return
    end procedure

    subroutine update_tridiag_matrix_${type[0]}$${kind}$(T, X, k)
        integer, intent(in) :: k
        ${type}$, intent(inout) :: T(:, :)
        class(abstract_vector_${type[0]}$${kind}$), intent(inout) :: X(:)

        ! Internal variables.
        integer :: i, info

        info = 0

        ! Orthogonalize residual w.r.t. previously computed Krylov vectors to obtain coefficients in tridiag. matrix
        do i = max(1, k-1), k
            T(i, k) = X(i)%dot(X(k+1)) ; call X(k+1)%axpby(-T(i, k), X(i), one_${type[0]}$${kind}$)
        enddo

        ! Full re-orthogonalization against existing basis
        call double_gram_schmidt_step(X(k+1), X(:k), info, if_chk_orthonormal=.false.)
        call check_info(info, 'orthogonalize_against_basis_p1', this_module, 'update_tridiag_matrix_${type[0]}$${kind}$')

        return
    end subroutine update_tridiag_matrix_${type[0]}$${kind}$
    #:endfor
end submodule

