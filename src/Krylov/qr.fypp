#:include "../../include/common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
submodule (lightkrylov_basekrylov) qr_solvers
    implicit none

    interface swap_columns
        #: for kind, type in RC_KINDS_TYPES
        module subroutine swap_columns_${type[0]}$${kind}$(Q, R, Rii, perm, i, j)
            class(abstract_vector_${type[0]}$${kind}$), intent(inout) :: Q(:)
            !! Vector basis whose i-th and j-th columns need swapping.
            ${type}$, intent(inout) :: R(:, :)
            !! Upper triangular matrix resulting from QR.
            ${type}$, intent(inout) :: Rii(:)
            !! Diagonal entries of R.
            integer, intent(inout) :: perm(:)
            !! Column ordering.
            integer, intent(in) :: i, j
            !! Index of the columns to be swapped.
        end subroutine
        #:endfor
    end interface

contains

    !------------------------------------
    !-----     QR WITH PIVOTING     -----
    !------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    module procedure qr_with_pivoting_${type[0]}$${kind}$
        character(len=*), parameter :: this_procedure = 'qr_with_pivoting_${type[0]}$${kind}$'
        real(${kind}$) :: tolerance
        ${type}$ :: beta
        integer :: idx, i, j, kdim
        integer :: idxv(1)
        ${type}$  :: Rii(size(Q))
        character(len=128) :: msg

        if (time_lightkrylov()) call timer%start(this_procedure)
        info = 0 ; kdim = size(Q) ; R = zero_r${kind}$ 
        
        ! Deals with the optional arguments.
        tolerance = optval(tol, atol_${kind}$)

        ! Initialize diagonal entries.
        do i = 1, kdim
            perm(i) = i
            Rii(i) = Q(i)%dot(Q(i))
        enddo

        qr_step: do j = 1, kdim
            idxv = maxloc(abs(Rii)) ; idx = idxv(1)
            if (abs(Rii(idx)) < tolerance) then
                do i = j, kdim
                    call Q(i)%rand()
                    call double_gram_schmidt_step(Q(i), Q(:i-1), info, if_chk_orthonormal=.false.)
                    call check_info(info, 'double_gram_schmidt_step', this_module, this_procedure)
                    beta = Q(i)%norm(); call Q(i)%scal(one_${type[0]}$${kind}$ / beta)
                enddo
                info = j
                write(msg,'(A,I0,A,E15.8)') 'Breakdown after ', j, ' steps. R_ii= ', abs(Rii(idx))
                call log_information(msg, this_module, this_procedure)
                exit qr_step
            endif

            call swap_columns(Q, R, Rii, perm, j, idx)

            ! Check for breakdown.
            beta = Q(j)%norm()
            #:if type[0] == "r"
            if (isnan(beta)) call stop_error('|beta| = NaN detected! Abort', this_module, this_procedure)
            #:else
            if (isnan(abs(beta))) call stop_error('|beta| = NaN detected! Abort', this_module, this_procedure)
            #:endif
            if (abs(beta) < tolerance) then
                info = j
                R(j, j) = zero_r${kind}$
                call Q(j)%rand()
                call double_gram_schmidt_step(Q(j), Q(:j-1), info, if_chk_orthonormal=.false.)
                call check_info(info, 'double_gram_schmidt_step', this_module, this_procedure)
                beta = Q(j)%norm()
            else
                R(j, j) = beta
            endif
            ! Normalize column.
            call Q(j)%scal(one_r${kind}$ / beta)

            ! Orthogonalize all columns against new vector.
            do i = j+1, kdim
                beta = Q(j)%dot(Q(i))
                call Q(i)%axpby(one_${type[0]}$${kind}$, Q(j), -beta)
                R(j, i) = beta
            enddo

            ! Update Rii.
            Rii(j) = zero_r${kind}$
            do i = j+1, kdim
                Rii(i) = Rii(i) - R(j, i)**2
            enddo

        enddo qr_step
        if (time_lightkrylov()) call timer%stop(this_procedure)
        
        return
    end procedure
    #:endfor

    !---------------------------------------------
    !-----     STANDARD QR FACTORIZATION     -----
    !---------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    module procedure qr_no_pivoting_${type[0]}$${kind}$
        character(len=*), parameter :: this_procedure = 'qr_no_pivoting_${type[0]}$${kind}$'
        real(${kind}$) :: tolerance
        ${type}$ :: beta
        integer :: j
        logical :: flag
        character(len=128) :: msg

        ! Deals with the optional args.
        tolerance = optval(tol, atol_${kind}$)

        if (time_lightkrylov()) call timer%start(this_procedure)
        info = 0 ; flag = .false.; R = zero_r${kind}$ ; beta = zero_r${kind}$
        do j = 1, size(Q)
            if (j > 1) then
                ! Double Gram-Schmidt orthogonalization
                call double_gram_schmidt_step(Q(j), Q(:j-1), info, if_chk_orthonormal=.false., beta = R(:j-1,j))
                call check_info(info, 'double_gram_schmidt_step', this_module, this_procedure)
            end if        

            ! Check for breakdown.
            beta = Q(j)%norm()
            #:if type[0] == "r"
            if (isnan(beta)) call stop_error('|beta| = NaN detected! Abort', this_module, this_procedure)
            #:else
            if (isnan(abs(beta))) call stop_error('|beta| = NaN detected! Abort', this_module, this_procedure)
            #:endif
            if (abs(beta) < tolerance) then
                if (.not.flag) then
                    flag = .true.
                    info = j
                    write(msg,'(A,I0,A,E15.8)') 'Colinear column detected after ', j, ' steps. beta= ', abs(beta)
                    call log_information(msg, this_module, this_procedure)
                end if
                R(j, j) = zero_r${kind}$
                call Q(j)%rand()
                if (j > 1) then
                    call double_gram_schmidt_step(Q(j), Q(:j-1), info, if_chk_orthonormal=.false.)
                    call check_info(info, 'double_gram_schmidt_step', this_module, this_procedure)
                end if
                beta = Q(j)%norm()
            else
                R(j, j) = beta
            endif
            ! Normalize column.
            call Q(j)%scal(one_r${kind}$ / beta)
        enddo
        if (time_lightkrylov()) call timer%stop(this_procedure)
        
        return
    end procedure
    #:endfor

    !-------------------------------------
    !-----     Utility functions     -----
    !-------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    module procedure swap_columns_${type[0]}$${kind}$
        class(abstract_vector_${type[0]}$${kind}$), allocatable :: Qwrk
        ${type}$, allocatable :: Rwrk(:)
        integer :: iwrk, m, n

        ! Sanity checks.
        m = size(Q) ; n = min(i, j) - 1

        ! Allocations.
        allocate(Qwrk, mold=Q(1)) ; allocate(Rwrk(max(1, n))) ; Rwrk = zero_r${kind}$

        ! Swap columns.
        call copy(Qwrk, Q(j))
        call copy(Q(j), Q(i))
        call copy(Q(i), Qwrk)
        
        Rwrk(1) = Rii(j); Rii(j) = Rii(i); Rii(i) = Rwrk(1)
        iwrk = perm(j); perm(j) = perm(i) ; perm(i) = iwrk

        if (n > 0) then
            Rwrk = R(:n, j) ; R(:n, j) = R(:n, i) ; R(:n, i) = Rwrk
        endif

        return
    end procedure
    #:endfor
end submodule
