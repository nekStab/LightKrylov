#:include "../include/common.fypp"
#:set RC_KINDS_TYPES = REAL_KINDS_TYPES + CMPLX_KINDS_TYPES
module LightKrylov_AbstractLinops
    !!  This module provides the base classes `abtract_linop_rsp`, `abstract_linop_rdp`,
    !!  `abstract_linop_csp` and `abstract_linop_cdp` which can be used to define your own
    !!  linear operators. To do so, you simply need to provide two type-bound procedures:
    !!  
    !!  - `matvec(self, vec_in, vec_out)` : Computes the matrix-vector product.
    !!  - `rmatvec(self, vec_in, vec_out)`: Computes the transpose matrix-vector product.
    !!
    !!  It also provides extended types to define the identity operator, symmetric linear
    !!  operators, scalar-multiplication of a linear multiplication, as well as addition
    !!  of two linear operators.
    use LightKrylov_Constants
    use LightKrylov_Utils
    use LightKrylov_AbstractVectors
    implicit none
    private

    character(len=128), parameter :: this_module = 'Lightkrylov_AbstractLinops'

    type, abstract, public :: abstract_linop
        !!  Base type to define an abstract linear operator. All other types defined in
        !!  `LightKrylov` derive from this fundamental one.
        !!
        !!  @warning
        !!  Users should not extend this abstract class to define their own types.
        !!  @endwarning
    end type abstract_linop

    #:for kind, type in RC_KINDS_TYPES
    !------------------------------------------------------------------------------
    !-----     Definition of an abstract ${type}$ operator with kind=${kind}$     -----
    !------------------------------------------------------------------------------
    type, abstract, extends(abstract_linop), public :: abstract_linop_${type[0]}$${kind}$
        !! Base type to extend in order to define a ${type}$-valued linear operator.
    contains
        private
        procedure(abstract_matvec_${type[0]}$${kind}$), pass(self), deferred, public :: matvec
        !! Procedure to compute the matrix-vector product \( \mathbf{y} = \mathbf{Ax} \).
        procedure(abstract_matvec_${type[0]}$${kind}$), pass(self), deferred, public :: rmatvec
        !! Procedure to compute the reversed matrix-vector product \( \mathbf{y} = \mathbf{A}^H \mathbf{x} \).
    end type

    abstract interface
        subroutine abstract_matvec_${type[0]}$${kind}$(self, vec_in, vec_out)
            !! Interface for the matrix-vector product.
            use LightKrylov_AbstractVectors
            import abstract_linop_${type[0]}$${kind}$
            class(abstract_linop_${type[0]}$${kind}$) , intent(in)  :: self
            !! Linear operator \(\mathbf{A}\).
            class(abstract_vector_${type[0]}$${kind}$), intent(in)  :: vec_in
            !! Vector to be multiplied by \(\mathbf{A}\).
            class(abstract_vector_${type[0]}$${kind}$), intent(out) :: vec_out
            !! Result of the matrix-vector product.
        end subroutine abstract_matvec_${type[0]}$${kind}$
    end interface

    type, extends(abstract_linop_${type[0]}$${kind}$), public :: adjoint_linop_${type[0]}$${kind}$
        !! Utility type to define an adjoint linear operator. The definition of `matvec` and `rmatvec`
        !! are directly inherited from those used to define `A`. Note that this utility does not
        !! compute the adjoint for you. It simply provides a utility to define a new operator
        !! with `matvec` and `rmatvec` being switched.
        class(abstract_linop_${type[0]}$${kind}$), allocatable :: A
        !! Linear operator whose adjoint needs to be defined.
    contains
        private
        procedure, pass(self), public :: matvec => adjoint_matvec_${type[0]}$${kind}$
        procedure, pass(self), public :: rmatvec => adjoint_rmatvec_${type[0]}$${kind}$
    end type



    #:endfor

    !--------------------------------------------------
    !-----     Definition of the Identity map     -----
    !--------------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    type, extends(abstract_linop_${type[0]}$${kind}$), public :: Id_${type[0]}$${kind}$
        !! Utility type to define the Identity operator. Note that the type-bound procedures
        !! for `matvec` and `rmatvec` do not have to be defined by the user.
        contains
        private
        procedure, pass(self), public :: matvec => id_matvec_${type[0]}$${kind}$
        procedure, pass(self), public :: rmatvec => id_matvec_${type[0]}$${kind}$
    end type

    #:endfor

    !----------------------------------------------
    !-----     Definition of scaled linop     -----
    !----------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    type, extends(abstract_linop_${type[0]}$${kind}$), public :: scaled_linop_${type[0]}$${kind}$
        #:if type[0] == "r"
        !! Defines a scaled linear operator \( \mathbf{B} = \sigma \mathbf{A} \) with \( \mathbf{A} \) a real-valued operator and \( \sigma \in \mathbb{R} \). The definitions of `matvec`
        !! and `rmatvec` are directly inherited from those used to define `A` and do not have to
        !! be defined by the user.
        class(abstract_linop_${type[0]}$${kind}$), allocatable :: A
        !! Base linear operator to be scaled.
        ${type}$ :: sigma
        !! Scaling factor.
        #:else
        !! Defines a scaled linear operator \( \mathbf{B} = \sigma \mathbf{A} \) with \( \mathbf{A} \) a complex-valued operator and \( \sigma \in \mathbb{C} \).
        class(abstract_linop_${type[0]}$${kind}$), allocatable :: A
        !! Base linear operator to be scaled.
        ${type}$ :: sigma
        !! Scaling factor.
       #:endif
    contains
        private
        procedure, pass(self), public :: matvec => scaled_matvec_${type[0]}$${kind}$
        procedure, pass(self), public :: rmatvec => scaled_rmatvec_${type[0]}$${kind}$
    end type
    #:endfor

    !------------------------------------------------
    !-----     Definition of axpby operator     -----
    !------------------------------------------------

    #:for kind, type in RC_KINDS_TYPES
    type, extends(abstract_linop_${type[0]}$${kind}$), public :: axpby_linop_${type[0]}$${kind}$
        !! Utility type to define a composite linear operator \( \mathbf{C} = \alpha \mathbf{A} + \beta \mathbf{B} \).
        !! The definitions of `matvec` and `rmatvec` are directly inherited from those used to
        !! define `A` and `B`.
        class(abstract_linop_${type[0]}$${kind}$), allocatable :: A, B
        !! Underlying linear operators.
        ${type}$ :: alpha, beta
        !! Scaling factors.
        logical :: transA = .false., transB = .false.
        !! Logical flag to control whether \( \mathbf{A} \) and/or \( \mathbf{B} \) need to be transposed.
    contains
        private
        procedure, pass(self), public :: matvec => axpby_matvec_${type[0]}$${kind}$
        procedure, pass(self), public :: rmatvec => axpby_rmatvec_${type[0]}$${kind}$
    end type
    #:endfor

    #:for kind, type in RC_KINDS_TYPES
    #:if type[0] == "r"
    !----------------------------------------------------------------
    !-----     Definition of an abstract symmetric operator     -----
    !----------------------------------------------------------------
    type, abstract, extends(abstract_linop_${type[0]}$${kind}$), public :: abstract_sym_linop_${type[0]}$${kind}$
        !! Abstract representation of an abstract symmetric (real valued) linear operator.
    contains
    end type
    #:else
    !----------------------------------------------------------------------------------
    !-----     Definition of an abstract Hermitian positive definite operator     -----
    !----------------------------------------------------------------------------------
    type, abstract, extends(abstract_linop_${type[0]}$${kind}$), public :: abstract_hermitian_linop_${type[0]}$${kind}$
        !! Abstract representation of an abstract hermitian (complex-valued) linear operator.
    contains
    end type
 
   #:endif



    #:endfor
contains

    #:for kind, type in RC_KINDS_TYPES
    subroutine id_matvec_${type[0]}$${kind}$(self, vec_in, vec_out)
        class(Id_${type[0]}$${kind}$), intent(in) :: self
        class(abstract_vector_${type[0]}$${kind}$), intent(in) :: vec_in
        class(abstract_vector_${type[0]}$${kind}$), intent(out) :: vec_out
        call copy(vec_out, vec_in)
        return
    end subroutine id_matvec_${type[0]}$${kind}$
    #:endfor

    #:for kind, type in RC_KINDS_TYPES
    subroutine scaled_matvec_${type[0]}$${kind}$(self, vec_in, vec_out)
        class(scaled_linop_${type[0]}$${kind}$), intent(in) :: self
        class(abstract_vector_${type[0]}$${kind}$), intent(in) :: vec_in
        class(abstract_vector_${type[0]}$${kind}$), intent(out) :: vec_out
        call self%A%matvec(vec_in, vec_out) ; call vec_out%scal(self%sigma)
        return
    end subroutine scaled_matvec_${type[0]}$${kind}$

    subroutine scaled_rmatvec_${type[0]}$${kind}$(self, vec_in, vec_out)
        class(scaled_linop_${type[0]}$${kind}$), intent(in) :: self
        class(abstract_vector_${type[0]}$${kind}$), intent(in) :: vec_in
        class(abstract_vector_${type[0]}$${kind}$), intent(out) :: vec_out
        call self%A%rmatvec(vec_in, vec_out) ; call vec_out%scal(self%sigma)
        return
    end subroutine scaled_rmatvec_${type[0]}$${kind}$
    #:endfor

    #:for kind, type in RC_KINDS_TYPES
    subroutine axpby_matvec_${type[0]}$${kind}$(self, vec_in, vec_out)
        class(axpby_linop_${type[0]}$${kind}$), intent(in) :: self
        class(abstract_vector_${type[0]}$${kind}$), intent(in) :: vec_in
        class(abstract_vector_${type[0]}$${kind}$), intent(out) :: vec_out

        ! Working array.
        class(abstract_vector_${type[0]}$${kind}$), allocatable :: wrk

        ! Allocate working array.
        allocate(wrk, source=vec_in) ; call wrk%zero()

        ! w = A @ x
        if (self%transA) then
            call self%A%rmatvec(vec_in, wrk)
        else
            call self%A%matvec(vec_in, wrk)
        endif

        ! y = B @ x
        if (self%transB) then
            call self%B%rmatvec(vec_in, vec_out)
        else
            call self%B%matvec(vec_in, vec_out)
        endif

        ! y = alpha*w + beta*y
        call vec_out%axpby(self%beta, wrk, self%alpha)

        return
    end subroutine axpby_matvec_${type[0]}$${kind}$

    subroutine axpby_rmatvec_${type[0]}$${kind}$(self, vec_in, vec_out)
        class(axpby_linop_${type[0]}$${kind}$), intent(in) :: self
        class(abstract_vector_${type[0]}$${kind}$), intent(in) :: vec_in
        class(abstract_vector_${type[0]}$${kind}$), intent(out) :: vec_out

        ! Working array.
        class(abstract_vector_${type[0]}$${kind}$), allocatable :: wrk

        ! Allocate working array.
        allocate(wrk, source=vec_in) ; call wrk%zero()

        ! w = A @ x
        if (self%transA) then
            call self%A%matvec(vec_in, wrk)
        else
            call self%A%rmatvec(vec_in, wrk)
        endif

        ! y = B @ x
        if (self%transB) then
            call self%B%matvec(vec_in, vec_out)
        else
            call self%B%rmatvec(vec_in, vec_out)
        endif

        ! y = alpha*w + beta*y
        call vec_out%axpby(self%beta, wrk, self%alpha)

        return
    end subroutine axpby_rmatvec_${type[0]}$${kind}$

    #:endfor

    #:for kind, type in RC_KINDS_TYPES
    subroutine adjoint_matvec_${type[0]}$${kind}$(self, vec_in, vec_out)
        class(adjoint_linop_${type[0]}$${kind}$), intent(in) :: self
        class(abstract_vector_${type[0]}$${kind}$), intent(in) :: vec_in
        class(abstract_vector_${type[0]}$${kind}$), intent(out) :: vec_out

        call self%A%rmatvec(vec_in, vec_out)

        return
    end subroutine adjoint_matvec_${type[0]}$${kind}$

    subroutine adjoint_rmatvec_${type[0]}$${kind}$(self, vec_in, vec_out)
        class(adjoint_linop_${type[0]}$${kind}$), intent(in) :: self
        class(abstract_vector_${type[0]}$${kind}$), intent(in) :: vec_in
        class(abstract_vector_${type[0]}$${kind}$), intent(out) :: vec_out

        call self%A%matvec(vec_in, vec_out)

        return
    end subroutine adjoint_rmatvec_${type[0]}$${kind}$

    #:endfor

end module LightKrylov_AbstractLinops
